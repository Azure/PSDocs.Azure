{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"creating-your-pipeline/","text":"Creating your pipeline # You can use PSDocs for Azure to generate documentation from within a continuous integration (CI) pipeline. Abstract This topic covers creating a pipeline to automatically build documentation with PSDocs for Azure. The pipeline: Installs the PSDocs.Azure module Generates markdown for each Azure template in the templates/ sub-directory. Within the root directory of your Infrastructure as Code (IaC) repository: GitHub Actions Create a new GitHub Actions workflow by creating .github/workflows/publish-docs.yaml . Add the following code to the workflow file. name : Publish docs on : push : branches : [ main ] jobs : publish : name : Publish runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - name : Generate docs run : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } shell : pwsh This will automatically install compatible versions of all dependencies. Azure Pipelines Create a new Azure DevOps YAML pipeline by creating .azure-pipelines/publish-docs.yaml . Add the following code to the YAML pipeline file. jobs : - job : 'Publish' displayName : 'Generate ARM template docs' pool : vmImage : 'windows-2019' steps : # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - powershell : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } displayName : 'Generate docs' This will automatically install compatible versions of all dependencies.","title":"Creating your pipeline"},{"location":"creating-your-pipeline/#creating-your-pipeline","text":"You can use PSDocs for Azure to generate documentation from within a continuous integration (CI) pipeline. Abstract This topic covers creating a pipeline to automatically build documentation with PSDocs for Azure. The pipeline: Installs the PSDocs.Azure module Generates markdown for each Azure template in the templates/ sub-directory. Within the root directory of your Infrastructure as Code (IaC) repository: GitHub Actions Create a new GitHub Actions workflow by creating .github/workflows/publish-docs.yaml . Add the following code to the workflow file. name : Publish docs on : push : branches : [ main ] jobs : publish : name : Publish runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - name : Generate docs run : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } shell : pwsh This will automatically install compatible versions of all dependencies. Azure Pipelines Create a new Azure DevOps YAML pipeline by creating .azure-pipelines/publish-docs.yaml . Add the following code to the YAML pipeline file. jobs : - job : 'Publish' displayName : 'Generate ARM template docs' pool : vmImage : 'windows-2019' steps : # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - powershell : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } displayName : 'Generate docs' This will automatically install compatible versions of all dependencies.","title":"Creating your pipeline"},{"location":"install-instructions/","text":"Installation # PSDocs for Azure supports running within continuous integration ( CI ) systems or locally. It is shipped as a PowerShell module which makes it easy to install and distribute updates. Running within CI # Continue reading creating your pipeline to learn more. Installing locally # PSDocs for Azure can be installed locally from the PowerShell Gallery using PowerShell. You can also use this option to install on CI workers that are not natively supported. The following platforms are supported: Windows PowerShell 5.1 with .NET Framework 4.7.2 or greater. PowerShell 7.1 or greater on MacOS, Linux, and Windows. PSDocs for Azure requires the PSDocs PowerShell module. The required version of PSDocs will automatically be installed along-side PSDocs for Azure. Installing PowerShell # PowerShell 7.x can be installed on MacOS, Linux, and Windows but is not installed by default. For a list of platforms that PowerShell 7.1 is supported on and install instructions see Get PowerShell . Getting the modules # Module PSDocs for Azure can be installed or updated from the PowerShell Gallery. Use the following command line examples from a PowerShell terminal to install or update PSDocs for Azure. For the current user To install PSDocs for Azure for the current user use: Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope CurrentUser To update PSDocs for Azure for the current user use: Update-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope CurrentUser This will automatically install compatible versions of all dependencies. For all users To install PSDocs for Azure for all users (requires admin/ root permissions) use: Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope AllUsers To update PSDocs for Azure for all users (requires admin/ root permissions) use: Update-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope AllUsers This will automatically install compatible versions of all dependencies. Pre-release versions # To use a pre-release version of PSDocs for Azure add the -AllowPrerelease switch when calling Install-Module , Update-Module , or Save-Module cmdlets. Tip To install pre-release module versions, the latest version of PowerShellGet may be required. # Install the latest PowerShellGet version Install-Module -Name PowerShellGet -Repository PSGallery -Scope CurrentUser -Force Building from source # Source PSDocs for Azure is provided as open source on GitHub. To build PSDocs for Azure from source code: Clone the GitHub repository . Run ./build.ps1 from a PowerShell terminal in the cloned path. This build script will compile the module and documentation then output the result into out/modules/PSDocs.Azure . Development dependencies # The following PowerShell modules will be automatically install if the required versions are not present: PlatyPS Pester PSScriptAnalyzer PowerShellGet PackageManagement InvokeBuild These additional modules are only required for building PSDocs for Azure. Additionally .NET Core SDK v3.1 is required. .NET Core will not be automatically downloaded and installed. To download and install the latest SDK see Download .NET Core 3.1 . Limited access networks # If you are on a network that does not permit Internet access to the PowerShell Gallery, download the required PowerShell modules on an alternative device that has access. PowerShell provides the Save-Module cmdlet that can be run from a PowerShell terminal to do this. The following command lines can be used to download the required modules using a PowerShell terminal. After downloading the modules, copy the module directories to devices with restricted Internet access. Runtime modules To save PSDocs for Azure for offline use: $modules = @( 'PSDocs' , 'PSDocs.Azure' ) Save-Module -Name $modules -Path '.\\modules' This will save PSDocs for Azure and all dependencies into the modules sub-directory. Development modules To save PSDocs for Azure development module dependencies for offline use: $modules = @( 'PSDocs' , 'PlatyPS' , 'Pester' , 'PSScriptAnalyzer' , 'PowerShellGet' , 'PackageManagement' , 'InvokeBuild' ) Save-Module -Name $modules -Repository PSGallery -Path '.\\modules' ; This will save required developments dependencies into the modules sub-directory.","title":"Installation"},{"location":"install-instructions/#installation","text":"PSDocs for Azure supports running within continuous integration ( CI ) systems or locally. It is shipped as a PowerShell module which makes it easy to install and distribute updates.","title":"Installation"},{"location":"install-instructions/#running-within-ci","text":"Continue reading creating your pipeline to learn more.","title":"Running within CI"},{"location":"install-instructions/#installing-locally","text":"PSDocs for Azure can be installed locally from the PowerShell Gallery using PowerShell. You can also use this option to install on CI workers that are not natively supported. The following platforms are supported: Windows PowerShell 5.1 with .NET Framework 4.7.2 or greater. PowerShell 7.1 or greater on MacOS, Linux, and Windows. PSDocs for Azure requires the PSDocs PowerShell module. The required version of PSDocs will automatically be installed along-side PSDocs for Azure.","title":"Installing locally"},{"location":"install-instructions/#installing-powershell","text":"PowerShell 7.x can be installed on MacOS, Linux, and Windows but is not installed by default. For a list of platforms that PowerShell 7.1 is supported on and install instructions see Get PowerShell .","title":"Installing PowerShell"},{"location":"install-instructions/#getting-the-modules","text":"Module PSDocs for Azure can be installed or updated from the PowerShell Gallery. Use the following command line examples from a PowerShell terminal to install or update PSDocs for Azure. For the current user To install PSDocs for Azure for the current user use: Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope CurrentUser To update PSDocs for Azure for the current user use: Update-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope CurrentUser This will automatically install compatible versions of all dependencies. For all users To install PSDocs for Azure for all users (requires admin/ root permissions) use: Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope AllUsers To update PSDocs for Azure for all users (requires admin/ root permissions) use: Update-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope AllUsers This will automatically install compatible versions of all dependencies.","title":"Getting the modules"},{"location":"install-instructions/#pre-release-versions","text":"To use a pre-release version of PSDocs for Azure add the -AllowPrerelease switch when calling Install-Module , Update-Module , or Save-Module cmdlets. Tip To install pre-release module versions, the latest version of PowerShellGet may be required. # Install the latest PowerShellGet version Install-Module -Name PowerShellGet -Repository PSGallery -Scope CurrentUser -Force","title":"Pre-release versions"},{"location":"install-instructions/#building-from-source","text":"Source PSDocs for Azure is provided as open source on GitHub. To build PSDocs for Azure from source code: Clone the GitHub repository . Run ./build.ps1 from a PowerShell terminal in the cloned path. This build script will compile the module and documentation then output the result into out/modules/PSDocs.Azure .","title":"Building from source"},{"location":"install-instructions/#development-dependencies","text":"The following PowerShell modules will be automatically install if the required versions are not present: PlatyPS Pester PSScriptAnalyzer PowerShellGet PackageManagement InvokeBuild These additional modules are only required for building PSDocs for Azure. Additionally .NET Core SDK v3.1 is required. .NET Core will not be automatically downloaded and installed. To download and install the latest SDK see Download .NET Core 3.1 .","title":"Development dependencies"},{"location":"install-instructions/#limited-access-networks","text":"If you are on a network that does not permit Internet access to the PowerShell Gallery, download the required PowerShell modules on an alternative device that has access. PowerShell provides the Save-Module cmdlet that can be run from a PowerShell terminal to do this. The following command lines can be used to download the required modules using a PowerShell terminal. After downloading the modules, copy the module directories to devices with restricted Internet access. Runtime modules To save PSDocs for Azure for offline use: $modules = @( 'PSDocs' , 'PSDocs.Azure' ) Save-Module -Name $modules -Path '.\\modules' This will save PSDocs for Azure and all dependencies into the modules sub-directory. Development modules To save PSDocs for Azure development module dependencies for offline use: $modules = @( 'PSDocs' , 'PlatyPS' , 'Pester' , 'PSScriptAnalyzer' , 'PowerShellGet' , 'PackageManagement' , 'InvokeBuild' ) Save-Module -Name $modules -Repository PSGallery -Path '.\\modules' ; This will save required developments dependencies into the modules sub-directory.","title":"Limited access networks"},{"location":"license-contributing/","text":"License and contributing # PSDocs for Azure is licensed with an MIT License , which means it's free to use and modify. But please check out the details. We open source at Microsoft. In addition to our team, we hope you will think about contributing too. Here is how you can get started: Report issues. Upvote existing issues that are important to you. Improve documentation. Contribute code.","title":"License and contributing"},{"location":"license-contributing/#license-and-contributing","text":"PSDocs for Azure is licensed with an MIT License , which means it's free to use and modify. But please check out the details. We open source at Microsoft. In addition to our team, we hope you will think about contributing too. Here is how you can get started: Report issues. Upvote existing issues that are important to you. Improve documentation. Contribute code.","title":"License and contributing"},{"location":"overview/","text":"What is PSDocs for Azure? # PSDocs for Azure is a module for PSDocs , an engine to generate documentation from Infrastructure as Code (IaC). PSDocs for Azure includes pre-built functions and templates that make it easy to generate documentation. What customers about PSDocs for Azure: Continuous \u2014 Generate documentation as an output of infrastructure code, not an extra process that someone needs to do. Consistency \u2014 Focus on building great solutions on Azure with infrastructure code. As infrastructure code is updated so is the documentation. Consumable \u2014 Transform infrastructure code into presentable documentation. Use standard documentation that make it easier to deploy Azure resources. Ready to go # PSDocs for Azure automatically generates documentation for Azure infrastructure as code (IaC) artifacts. It does this by, reading then processing each artifacts with one or more included documentation templates. Documentation is outputted as markdown a standard, easy to read, easy to render format for modern documentation. We use the same standard for docs.microsoft.com . Currently the following infrastructure code artifacts are supported: Azure Resource Manager (ARM) template files. Example output . As new features are added and improved, download the latest PowerShell module to start using them. DevOps # Azure infrastructure code such as ARM template supports a number of ways to self document in code. PSDocs uses these existing features and makes them easier to consume. Document generation can be integrated into a continuous integration (CI) pipeline to: Shift-left: Identify documentation issues and provide fast feedback in pull requests. Cross-platform # PSDocs uses modern PowerShell libraries at its core, allowing it to go anywhere PowerShell can go. PSDocs runs on MacOS, Linux and Windows. PowerShell makes it easy to integrate PSDocs into popular CI systems. To install, use the Install-Module cmdlet within PowerShell. For installation options see install instructions . Frequently Asked Questions (FAQ) # Can PSDocs read from metadata.json? # The Azure Quickstart Templates repository uses an additional metadata.json to store template metadata. PSDocs doesn't require a metadata.json file to exist but will fallback to this file if it exists. For details on metadata.json see Azure Resource Manager QuickStart Templates contributing guide . PSDocs reads metadata.json using the following logic: Metadata is loaded from the template metadata property. When metadata.json exists, properties are merged with the template metadata. Properties included in template metadata override properties included from metadata.json . The $schema property from metadata.json is ignored. For PSDocs to discover metadata.json it must exist in the same directory as the template file. When creating metadata.json use only lowercase in the file name. The schema of metadata.json differs from template metadata. To maintain compatibility, PSDocs automatically maps the metadata as described in the following table. metadata.json Template metadata Description itemDisplayName Maps to name Used for markdown page title. summary Maps to summary Used as a short description for the markdown page. description Maps to description Used as a detailed description for the markdown page. For example: If name exists in template metadata, this will take priority over itemDisplayName from metadata.json . If name does not exist in template metadata, itemDisplayName from metadata.json will be used. How do I include a badge image? # To include a badge image, create the .ps-docs/azure-template-badges.md file. Within this file add markdown links to your badge image. Use the following placeholders to reference unique images per template. {{ template_path }} - The relative path of the template directory. {{ template_path_encoded }} - The relative path of the template directory URL encoded. See about_PSDocs_Azure_Badges for additional details. Can PSDocs generate badges for documentation? # No. PSDocs can not generate badge images for you. Once you have generated a badge, PSDocs can include a link to the badge for displaying directly in markdown.","title":"Overview"},{"location":"overview/#what-is-psdocs-for-azure","text":"PSDocs for Azure is a module for PSDocs , an engine to generate documentation from Infrastructure as Code (IaC). PSDocs for Azure includes pre-built functions and templates that make it easy to generate documentation. What customers about PSDocs for Azure: Continuous \u2014 Generate documentation as an output of infrastructure code, not an extra process that someone needs to do. Consistency \u2014 Focus on building great solutions on Azure with infrastructure code. As infrastructure code is updated so is the documentation. Consumable \u2014 Transform infrastructure code into presentable documentation. Use standard documentation that make it easier to deploy Azure resources.","title":"What is PSDocs for Azure?"},{"location":"overview/#ready-to-go","text":"PSDocs for Azure automatically generates documentation for Azure infrastructure as code (IaC) artifacts. It does this by, reading then processing each artifacts with one or more included documentation templates. Documentation is outputted as markdown a standard, easy to read, easy to render format for modern documentation. We use the same standard for docs.microsoft.com . Currently the following infrastructure code artifacts are supported: Azure Resource Manager (ARM) template files. Example output . As new features are added and improved, download the latest PowerShell module to start using them.","title":"Ready to go"},{"location":"overview/#devops","text":"Azure infrastructure code such as ARM template supports a number of ways to self document in code. PSDocs uses these existing features and makes them easier to consume. Document generation can be integrated into a continuous integration (CI) pipeline to: Shift-left: Identify documentation issues and provide fast feedback in pull requests.","title":"DevOps"},{"location":"overview/#cross-platform","text":"PSDocs uses modern PowerShell libraries at its core, allowing it to go anywhere PowerShell can go. PSDocs runs on MacOS, Linux and Windows. PowerShell makes it easy to integrate PSDocs into popular CI systems. To install, use the Install-Module cmdlet within PowerShell. For installation options see install instructions .","title":"Cross-platform"},{"location":"overview/#frequently-asked-questions-faq","text":"","title":"Frequently Asked Questions (FAQ)"},{"location":"overview/#can-psdocs-read-from-metadatajson","text":"The Azure Quickstart Templates repository uses an additional metadata.json to store template metadata. PSDocs doesn't require a metadata.json file to exist but will fallback to this file if it exists. For details on metadata.json see Azure Resource Manager QuickStart Templates contributing guide . PSDocs reads metadata.json using the following logic: Metadata is loaded from the template metadata property. When metadata.json exists, properties are merged with the template metadata. Properties included in template metadata override properties included from metadata.json . The $schema property from metadata.json is ignored. For PSDocs to discover metadata.json it must exist in the same directory as the template file. When creating metadata.json use only lowercase in the file name. The schema of metadata.json differs from template metadata. To maintain compatibility, PSDocs automatically maps the metadata as described in the following table. metadata.json Template metadata Description itemDisplayName Maps to name Used for markdown page title. summary Maps to summary Used as a short description for the markdown page. description Maps to description Used as a detailed description for the markdown page. For example: If name exists in template metadata, this will take priority over itemDisplayName from metadata.json . If name does not exist in template metadata, itemDisplayName from metadata.json will be used.","title":"Can PSDocs read from metadata.json?"},{"location":"overview/#how-do-i-include-a-badge-image","text":"To include a badge image, create the .ps-docs/azure-template-badges.md file. Within this file add markdown links to your badge image. Use the following placeholders to reference unique images per template. {{ template_path }} - The relative path of the template directory. {{ template_path_encoded }} - The relative path of the template directory URL encoded. See about_PSDocs_Azure_Badges for additional details.","title":"How do I include a badge image?"},{"location":"overview/#can-psdocs-generate-badges-for-documentation","text":"No. PSDocs can not generate badge images for you. Once you have generated a badge, PSDocs can include a link to the badge for displaying directly in markdown.","title":"Can PSDocs generate badges for documentation?"},{"location":"release/","text":"Release process for PSDocs for Azure # The following sections describe the process for making a new release. Update CHANGELOG with all changes since the last release (including all pre-release versions) Submit a Pull Request for review Navigate to Releases and select Draft a new release SemVer is used to version the releases. To use the correct release/tag the following options are used: A stable release: increment from the previous release e.g. v0.2.0 A pre-release: select the This is a pre-release option and select the build version from the previous build in Azure DevOps Pipelines. This version can be found from previous build run. E.g., for the recent Pull Request go to Pull Request -> Checks -> Analyze -> Azure Pipelines -> PSDocs.Azure-CI Build #0.2.0-B2103003 ** Wait for the deployment to be released in PowerShell Gallery After a successful release, create another PR updating: .azure-pipelines/azure-pipelines.yaml with the next version increment e.g. if the newly released version is 0.2.0, set this to version: '0.3.0'","title":"Release process for PSDocs for Azure"},{"location":"release/#release-process-for-psdocs-for-azure","text":"The following sections describe the process for making a new release. Update CHANGELOG with all changes since the last release (including all pre-release versions) Submit a Pull Request for review Navigate to Releases and select Draft a new release SemVer is used to version the releases. To use the correct release/tag the following options are used: A stable release: increment from the previous release e.g. v0.2.0 A pre-release: select the This is a pre-release option and select the build version from the previous build in Azure DevOps Pipelines. This version can be found from previous build run. E.g., for the recent Pull Request go to Pull Request -> Checks -> Analyze -> Azure Pipelines -> PSDocs.Azure-CI Build #0.2.0-B2103003 ** Wait for the deployment to be released in PowerShell Gallery After a successful release, create another PR updating: .azure-pipelines/azure-pipelines.yaml with the next version increment e.g. if the newly released version is 0.2.0, set this to version: '0.3.0'","title":"Release process for PSDocs for Azure"},{"location":"support/","text":"Support # This project uses GitHub Issues to track bugs and feature requests. Before logging an issue please see our troubleshooting guide . Please search the existing issues before filing new issues to avoid duplicates. For new issues, file your bug or feature request as a new issue . For help, discussion, and support questions about using this project, join or start a discussion . Microsoft Support Policy # Support for this project/ product is limited to the resources listed above.","title":"Support"},{"location":"support/#support","text":"This project uses GitHub Issues to track bugs and feature requests. Before logging an issue please see our troubleshooting guide . Please search the existing issues before filing new issues to avoid duplicates. For new issues, file your bug or feature request as a new issue . For help, discussion, and support questions about using this project, join or start a discussion .","title":"Support"},{"location":"support/#microsoft-support-policy","text":"Support for this project/ product is limited to the resources listed above.","title":"Microsoft Support Policy"},{"location":"troubleshooting/","text":"Troubleshooting # Coming soon .","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"Coming soon .","title":"Troubleshooting"},{"location":"using-metadata/","text":"Using metadata # PSDocs for Azure extracts meaningful information from Azure IaC artifacts. This information can be further supplemented with metadata that adds context such as parameter descriptions. Annotate template files # In its simplest structure, an Azure template has the following elements: { \"$schema\" : \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\" , \"contentVersion\" : \"1.0.0.0\" , \"parameters\" : { }, \"variables\" : { }, \"functions\" : [ ], \"resources\" : [ ], \"outputs\" : { } } Additionally a metadata property can be added in most places throughout the template. For example: { \"$schema\" : \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\" , \"contentVersion\" : \"1.0.0.0\" , \"metadata\" : { \"name\" : \"Storage Account\" , \"description\" : \"Create or update a Storage Account.\" }, \"parameters\" : { \"storageAccountName\" : { \"type\" : \"string\" , \"metadata\" : { \"description\" : \"The name of the Storage Account.\" } }, \"tags\" : { \"type\" : \"object\" , \"metadata\" : { \"description\" : \"Tags to apply to the resource.\" , \"example\" : { \"service\" : \"<service_name>\" , \"env\" : \"prod\" } } } }, \"resources\" : [ ], \"outputs\" : { \"resourceId\" : { \"type\" : \"string\" , \"value\" : \"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]\" , \"metadata\" : { \"description\" : \"A unique resource identifier for the storage account.\" } } } } This metadata and the template structure itself can be used to dynamically generate documentation. Documenting templates in this way allows you to: Include meaningful information with minimal effort. Use DevOps culture to author infrastructure code and documentation side-by-side. Review pull requests (PR) with changes and documentation together. Use continuous integration and deployment to release changes. Keep documentation up-to-date. No separate wiki or document to keep in sync. PSDocs interprets the template structure and metadata to generate documentation as markdown. Generating documentation as markdown allows you to publish web-based content on a variety of platforms. PSDocs supports the following metadata: Field Scope Type Description name Template string Used for markdown page title. summary Template string Used as a short description for the markdown page. description Template string Used as a detailed description for the markdown page. description Parameter string Used as the description for the parameter. example Parameter string , boolean , object , or array An example use of the parameter. The example is included in the JSON snippet. If an example is not included the default value is used instead. ignore Parameter boolean When true the parameter is not included in the JSON snippet. description Output string Used as the description for the output. An example of an Azure Storage Account template with metadata included is available [here][source-template]. Template metadata # Parameter metadata # Output metadata #","title":"Using metadata"},{"location":"using-metadata/#using-metadata","text":"PSDocs for Azure extracts meaningful information from Azure IaC artifacts. This information can be further supplemented with metadata that adds context such as parameter descriptions.","title":"Using metadata"},{"location":"using-metadata/#annotate-template-files","text":"In its simplest structure, an Azure template has the following elements: { \"$schema\" : \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\" , \"contentVersion\" : \"1.0.0.0\" , \"parameters\" : { }, \"variables\" : { }, \"functions\" : [ ], \"resources\" : [ ], \"outputs\" : { } } Additionally a metadata property can be added in most places throughout the template. For example: { \"$schema\" : \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\" , \"contentVersion\" : \"1.0.0.0\" , \"metadata\" : { \"name\" : \"Storage Account\" , \"description\" : \"Create or update a Storage Account.\" }, \"parameters\" : { \"storageAccountName\" : { \"type\" : \"string\" , \"metadata\" : { \"description\" : \"The name of the Storage Account.\" } }, \"tags\" : { \"type\" : \"object\" , \"metadata\" : { \"description\" : \"Tags to apply to the resource.\" , \"example\" : { \"service\" : \"<service_name>\" , \"env\" : \"prod\" } } } }, \"resources\" : [ ], \"outputs\" : { \"resourceId\" : { \"type\" : \"string\" , \"value\" : \"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]\" , \"metadata\" : { \"description\" : \"A unique resource identifier for the storage account.\" } } } } This metadata and the template structure itself can be used to dynamically generate documentation. Documenting templates in this way allows you to: Include meaningful information with minimal effort. Use DevOps culture to author infrastructure code and documentation side-by-side. Review pull requests (PR) with changes and documentation together. Use continuous integration and deployment to release changes. Keep documentation up-to-date. No separate wiki or document to keep in sync. PSDocs interprets the template structure and metadata to generate documentation as markdown. Generating documentation as markdown allows you to publish web-based content on a variety of platforms. PSDocs supports the following metadata: Field Scope Type Description name Template string Used for markdown page title. summary Template string Used as a short description for the markdown page. description Template string Used as a detailed description for the markdown page. description Parameter string Used as the description for the parameter. example Parameter string , boolean , object , or array An example use of the parameter. The example is included in the JSON snippet. If an example is not included the default value is used instead. ignore Parameter boolean When true the parameter is not included in the JSON snippet. description Output string Used as the description for the output. An example of an Azure Storage Account template with metadata included is available [here][source-template].","title":"Annotate template files"},{"location":"using-metadata/#template-metadata","text":"","title":"Template metadata"},{"location":"using-metadata/#parameter-metadata","text":"","title":"Parameter metadata"},{"location":"using-metadata/#output-metadata","text":"","title":"Output metadata"},{"location":"commands/en-US/Get-AzDocTemplateFile/","text":"Get-AzDocTemplateFile # SYNOPSIS # Get Azure template files within a directory structure. SYNTAX # Get-AzDocTemplateFile [[-InputPath] <String[]>] [[-Path] <String>] [<CommonParameters>] DESCRIPTION # Gets any Azure Resource Manager (ARM) template files found within the search path. By default, the current working path is used. When a JSON file is found the schema is compared to determine if it is a valid ARM template file. JSON files without a valid schema are ignored. EXAMPLES # Example 1 # PS C :\\> Get-AzDocTemplateFile Get a list of template files within the current working directory. PARAMETERS # -InputPath # A filter for finding template files within the search path. Type : String[] Parameter Sets : (All) Aliases : f, TemplateFile, FullName Required : False Position : 1 Default value : * .json Accept pipeline input : True (ByPropertyName) Accept wildcard characters : True -Path # The path to search for template files within. By default, the current working path is used. Type : String Parameter Sets : (All) Aliases : p Required : False Position : 0 Default value : $PWD Accept pipeline input : False Accept wildcard characters : False CommonParameters # This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS # System.String[] # OUTPUTS # PSDocs.Azure.Data.Metadata.ITemplateLink # NOTES # RELATED LINKS #","title":"Get-AzDocTemplateFile"},{"location":"commands/en-US/Get-AzDocTemplateFile/#get-azdoctemplatefile","text":"","title":"Get-AzDocTemplateFile"},{"location":"commands/en-US/Get-AzDocTemplateFile/#synopsis","text":"Get Azure template files within a directory structure.","title":"SYNOPSIS"},{"location":"commands/en-US/Get-AzDocTemplateFile/#syntax","text":"Get-AzDocTemplateFile [[-InputPath] <String[]>] [[-Path] <String>] [<CommonParameters>]","title":"SYNTAX"},{"location":"commands/en-US/Get-AzDocTemplateFile/#description","text":"Gets any Azure Resource Manager (ARM) template files found within the search path. By default, the current working path is used. When a JSON file is found the schema is compared to determine if it is a valid ARM template file. JSON files without a valid schema are ignored.","title":"DESCRIPTION"},{"location":"commands/en-US/Get-AzDocTemplateFile/#examples","text":"","title":"EXAMPLES"},{"location":"commands/en-US/Get-AzDocTemplateFile/#example-1","text":"PS C :\\> Get-AzDocTemplateFile Get a list of template files within the current working directory.","title":"Example 1"},{"location":"commands/en-US/Get-AzDocTemplateFile/#parameters","text":"","title":"PARAMETERS"},{"location":"commands/en-US/Get-AzDocTemplateFile/#-inputpath","text":"A filter for finding template files within the search path. Type : String[] Parameter Sets : (All) Aliases : f, TemplateFile, FullName Required : False Position : 1 Default value : * .json Accept pipeline input : True (ByPropertyName) Accept wildcard characters : True","title":"-InputPath"},{"location":"commands/en-US/Get-AzDocTemplateFile/#-path","text":"The path to search for template files within. By default, the current working path is used. Type : String Parameter Sets : (All) Aliases : p Required : False Position : 0 Default value : $PWD Accept pipeline input : False Accept wildcard characters : False","title":"-Path"},{"location":"commands/en-US/Get-AzDocTemplateFile/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"commands/en-US/Get-AzDocTemplateFile/#inputs","text":"","title":"INPUTS"},{"location":"commands/en-US/Get-AzDocTemplateFile/#systemstring","text":"","title":"System.String[]"},{"location":"commands/en-US/Get-AzDocTemplateFile/#outputs","text":"","title":"OUTPUTS"},{"location":"commands/en-US/Get-AzDocTemplateFile/#psdocsazuredatametadataitemplatelink","text":"","title":"PSDocs.Azure.Data.Metadata.ITemplateLink"},{"location":"commands/en-US/Get-AzDocTemplateFile/#notes","text":"","title":"NOTES"},{"location":"commands/en-US/Get-AzDocTemplateFile/#related-links","text":"","title":"RELATED LINKS"},{"location":"commands/en-US/PSDocs.Azure/","text":"PSDocs.Azure Module # Description # Generate documentation from Azure infrastructure as code (IaC) artifacts. PSDocs.Azure Cmdlets # Get-AzDocTemplateFile # Get Azure template files.","title":"PSDocs.Azure Module"},{"location":"commands/en-US/PSDocs.Azure/#psdocsazure-module","text":"","title":"PSDocs.Azure Module"},{"location":"commands/en-US/PSDocs.Azure/#description","text":"Generate documentation from Azure infrastructure as code (IaC) artifacts.","title":"Description"},{"location":"commands/en-US/PSDocs.Azure/#psdocsazure-cmdlets","text":"","title":"PSDocs.Azure Cmdlets"},{"location":"commands/en-US/PSDocs.Azure/#get-azdoctemplatefile","text":"Get Azure template files.","title":"Get-AzDocTemplateFile"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/","text":"PSDocs_Azure_Badges # about_PSDocs_Azure_Badges # SHORT DESCRIPTION # Describes how to insert template badges in to documentation. LONG DESCRIPTION # PSDocs allows external files to be included in Azure template documentation. Commonly this concept is used to include images that represent the validation status of the template. These images, are commonly referred to as badges . PSDocs can include badges that have been generated by an external validation tool. To include badge markdown: Create a sub-directory called .ps-docs in the working path of PSDocs. This would normally be root directory ( $PWD ) of the repository where your Azure template are stored. Create a file named azure-template-badges.md within the .ps-docs sub-directory. When creating all files and folder use lower case names. The contents of this file is automatically inserted in generated output after the title but before description. Include badges # To include badge images use standard markdown syntax within the azure-template-badges.md file. Markdown uses links to reference images. A person viewing the page must have permissions to view the source image. If not, the badge may be shown as a broken or placeholder image. For example: ![ label ]( https://image_uri ) For example, a Github Actions badge for PSDocs.Azure would be: ![ Analyze ]( https://github.com/Azure/PSDocs.Azure/workflows/Analyze/badge.svg ) To include badges images with a clickable link use standard markdown syntax: [ ![label ]( https://image_uri )](https://link_uri) For example, an Azure Pipelines badge for PSDocs.Azure would be: [ ![Build Status ]( https://dev.azure.com/PSDocs/PSDocs.Azure/_apis/build/status/PSDocs.Azure-CI?branchName=refs%2Fpull%2F44%2Fmerge )](https://dev.azure.com/PSDocs/PSDocs.Azure/_build/latest?definitionId=1&branchName=refs%2Fpull%2F44%2Fmerge) Dynamic links # In additional to inserting static content, some replacement tokens have been defined. When specified within azure-template-badges.md each token will be replaced when the file is included. The following replacement tokens have been defined: {{ template_path }} - The relative path of the template directory. {{ template_path_encoded }} - The relative path of the template directory URL encoded. For example, if the template path was .\\templates\\storage\\v1\\template.json the following would be used: {{ template_path }} = templates/storage/v1 {{ template_path_encoded }} = templates%2fstorage%2fv1 The follow example shows source markdown for including badges: ![ Best Practice Check ]( https://azurequickstartsservice.blob.core.windows.net/badges/{{ template_path }}/BestPracticeResult.svg ) [ ![Deploy To Azure ]( https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true )](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2F{{ template_path_encoded }}%2Fazuredeploy.json) After replacement the following would be the resulting output included in the template document: ![ Best Practice Check ]( https://azurequickstartsservice.blob.core.windows.net/badges/templates/storage/v1/BestPracticeResult.svg ) [ ![Deploy To Azure ]( https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true )](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2Ftemplates%2fstorage%2fv1%2Fazuredeploy.json) NOTE # An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Badges.md. KEYWORDS # Badge","title":"PSDocs_Azure_Badges"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#psdocs_azure_badges","text":"","title":"PSDocs_Azure_Badges"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#about_psdocs_azure_badges","text":"","title":"about_PSDocs_Azure_Badges"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#short-description","text":"Describes how to insert template badges in to documentation.","title":"SHORT DESCRIPTION"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#long-description","text":"PSDocs allows external files to be included in Azure template documentation. Commonly this concept is used to include images that represent the validation status of the template. These images, are commonly referred to as badges . PSDocs can include badges that have been generated by an external validation tool. To include badge markdown: Create a sub-directory called .ps-docs in the working path of PSDocs. This would normally be root directory ( $PWD ) of the repository where your Azure template are stored. Create a file named azure-template-badges.md within the .ps-docs sub-directory. When creating all files and folder use lower case names. The contents of this file is automatically inserted in generated output after the title but before description.","title":"LONG DESCRIPTION"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#include-badges","text":"To include badge images use standard markdown syntax within the azure-template-badges.md file. Markdown uses links to reference images. A person viewing the page must have permissions to view the source image. If not, the badge may be shown as a broken or placeholder image. For example: ![ label ]( https://image_uri ) For example, a Github Actions badge for PSDocs.Azure would be: ![ Analyze ]( https://github.com/Azure/PSDocs.Azure/workflows/Analyze/badge.svg ) To include badges images with a clickable link use standard markdown syntax: [ ![label ]( https://image_uri )](https://link_uri) For example, an Azure Pipelines badge for PSDocs.Azure would be: [ ![Build Status ]( https://dev.azure.com/PSDocs/PSDocs.Azure/_apis/build/status/PSDocs.Azure-CI?branchName=refs%2Fpull%2F44%2Fmerge )](https://dev.azure.com/PSDocs/PSDocs.Azure/_build/latest?definitionId=1&branchName=refs%2Fpull%2F44%2Fmerge)","title":"Include badges"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#dynamic-links","text":"In additional to inserting static content, some replacement tokens have been defined. When specified within azure-template-badges.md each token will be replaced when the file is included. The following replacement tokens have been defined: {{ template_path }} - The relative path of the template directory. {{ template_path_encoded }} - The relative path of the template directory URL encoded. For example, if the template path was .\\templates\\storage\\v1\\template.json the following would be used: {{ template_path }} = templates/storage/v1 {{ template_path_encoded }} = templates%2fstorage%2fv1 The follow example shows source markdown for including badges: ![ Best Practice Check ]( https://azurequickstartsservice.blob.core.windows.net/badges/{{ template_path }}/BestPracticeResult.svg ) [ ![Deploy To Azure ]( https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true )](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2F{{ template_path_encoded }}%2Fazuredeploy.json) After replacement the following would be the resulting output included in the template document: ![ Best Practice Check ]( https://azurequickstartsservice.blob.core.windows.net/badges/templates/storage/v1/BestPracticeResult.svg ) [ ![Deploy To Azure ]( https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true )](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2Ftemplates%2fstorage%2fv1%2Fazuredeploy.json)","title":"Dynamic links"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#note","text":"An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Badges.md.","title":"NOTE"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#keywords","text":"Badge","title":"KEYWORDS"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/","text":"PSDocs_Azure_Configuration # about_PSDocs_Azure_Configuration # SHORT DESCRIPTION # Describes PSDocs configuration options specific to PSDocs.Azure . LONG DESCRIPTION # PSDocs exposes configuration options that can be used to customize execution of document generation. This topic describes what configuration options are available. PSDocs configuration options can be specified by setting the configuration option in ps-docs.yaml . Additionally, configuration options can be configured in a baseline or set at runtime. For details of setting configuration options see PSDocs options The following configurations options are available for use: AZURE_USE_PARAMETER_FILE_SNIPPET AZURE_USE_COMMAND_LINE_SNIPPET AZURE_USE_PARAMETER_FILE_SNIPPET # This configuration option determines if a parameter file snippet is added to documentation. By default, a snippet is generated. To prevent a parameter file snippet being generated, set this option to false . Syntax: configuration : AZURE_USE_PARAMETER_FILE_SNIPPET : bool # Either true or false Default: # YAML: The default AZURE_USE_PARAMETER_FILE_SNIPPET configuration option configuration : AZURE_USE_PARAMETER_FILE_SNIPPET : true Example: # YAML: Prevent parameter file snippet from being generated configuration : AZURE_USE_PARAMETER_FILE_SNIPPET : false AZURE_USE_COMMAND_LINE_SNIPPET # This configuration option determines if a command line snippet is added to documentation. By default, this command line snippet is not generated. To generate command line snippet, set this option to true . Syntax: configuration : AZURE_USE_COMMAND_LINE_SNIPPET : bool # Either true or false Default: # YAML: The default AZURE_USE_COMMAND_LINE_SNIPPET configuration option is to disable generation configuration : AZURE_USE_COMMAND_LINE_SNIPPET : false Example: # YAML: To enable command line snippet configuration : AZURE_USE_COMMAND_LINE_SNIPPET : true NOTE # An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md. KEYWORDS # Configuration Document Snippet","title":"PSDocs_Azure_Configuration"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#psdocs_azure_configuration","text":"","title":"PSDocs_Azure_Configuration"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#about_psdocs_azure_configuration","text":"","title":"about_PSDocs_Azure_Configuration"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#short-description","text":"Describes PSDocs configuration options specific to PSDocs.Azure .","title":"SHORT DESCRIPTION"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#long-description","text":"PSDocs exposes configuration options that can be used to customize execution of document generation. This topic describes what configuration options are available. PSDocs configuration options can be specified by setting the configuration option in ps-docs.yaml . Additionally, configuration options can be configured in a baseline or set at runtime. For details of setting configuration options see PSDocs options The following configurations options are available for use: AZURE_USE_PARAMETER_FILE_SNIPPET AZURE_USE_COMMAND_LINE_SNIPPET","title":"LONG DESCRIPTION"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#azure_use_parameter_file_snippet","text":"This configuration option determines if a parameter file snippet is added to documentation. By default, a snippet is generated. To prevent a parameter file snippet being generated, set this option to false . Syntax: configuration : AZURE_USE_PARAMETER_FILE_SNIPPET : bool # Either true or false Default: # YAML: The default AZURE_USE_PARAMETER_FILE_SNIPPET configuration option configuration : AZURE_USE_PARAMETER_FILE_SNIPPET : true Example: # YAML: Prevent parameter file snippet from being generated configuration : AZURE_USE_PARAMETER_FILE_SNIPPET : false","title":"AZURE_USE_PARAMETER_FILE_SNIPPET"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#azure_use_command_line_snippet","text":"This configuration option determines if a command line snippet is added to documentation. By default, this command line snippet is not generated. To generate command line snippet, set this option to true . Syntax: configuration : AZURE_USE_COMMAND_LINE_SNIPPET : bool # Either true or false Default: # YAML: The default AZURE_USE_COMMAND_LINE_SNIPPET configuration option is to disable generation configuration : AZURE_USE_COMMAND_LINE_SNIPPET : false Example: # YAML: To enable command line snippet configuration : AZURE_USE_COMMAND_LINE_SNIPPET : true","title":"AZURE_USE_COMMAND_LINE_SNIPPET"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#note","text":"An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md.","title":"NOTE"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#keywords","text":"Configuration Document Snippet","title":"KEYWORDS"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/","text":"PSDocs_Azure_Conventions # about_PSDocs_Azure_Conventions # SHORT DESCRIPTION # Describes how to use conventions included in PSDocs.Azure . LONG DESCRIPTION # PSDocs for Azure includes conventions that can be included when generating documentation. Conventions alter the default pipeline to customize it for a specific situation. When running Invoke-PSDocument add the -Convention parameter to specify one or more conventions. For example: Invoke-PSDocument -Convention 'Azure.NameByParentPath' ; Azure.NameByParentPath # This convention can be used to change the default naming for documents. By default new documents are generated with the README.md file name. When the template file is stored under a well-known path <name>/<version>/template.json or <name>/template.json . i.e. templates/storage/v1/template.json or templates/storage/template.json The name and version can be used to name the output file. The resulting file name is updated to <name>_<version>.md . i.e. storage_v1.md For version to be detected, the version sub-directory must start with v and be followed by a number. When the version sub-directory a not detected the resulting file name is updated to <name>.md . i.e. storage.md NOTE # An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Conventions.md. KEYWORDS # Convention NameByParentPath","title":"PSDocs_Azure_Conventions"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#psdocs_azure_conventions","text":"","title":"PSDocs_Azure_Conventions"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#about_psdocs_azure_conventions","text":"","title":"about_PSDocs_Azure_Conventions"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#short-description","text":"Describes how to use conventions included in PSDocs.Azure .","title":"SHORT DESCRIPTION"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#long-description","text":"PSDocs for Azure includes conventions that can be included when generating documentation. Conventions alter the default pipeline to customize it for a specific situation. When running Invoke-PSDocument add the -Convention parameter to specify one or more conventions. For example: Invoke-PSDocument -Convention 'Azure.NameByParentPath' ;","title":"LONG DESCRIPTION"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#azurenamebyparentpath","text":"This convention can be used to change the default naming for documents. By default new documents are generated with the README.md file name. When the template file is stored under a well-known path <name>/<version>/template.json or <name>/template.json . i.e. templates/storage/v1/template.json or templates/storage/template.json The name and version can be used to name the output file. The resulting file name is updated to <name>_<version>.md . i.e. storage_v1.md For version to be detected, the version sub-directory must start with v and be followed by a number. When the version sub-directory a not detected the resulting file name is updated to <name>.md . i.e. storage.md","title":"Azure.NameByParentPath"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#note","text":"An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Conventions.md.","title":"NOTE"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#keywords","text":"Convention NameByParentPath","title":"KEYWORDS"},{"location":"publish/azure-webapp/","text":"Publish to Azure Web App # Markdown generated with PSDocs for Azure can be published as HTML for viewing with Azure App Service. Using Azure App Service our docs site can be secured for internal use or shared with authorized guests. Abstract This topic covers using a pipeline to publish HTML generated by PSDocs for Azure into an Azure Web App. Generating docs site # To publish documentation to an Azure Web App, we need to generate HTML from markdown. There are several widely used tools that help you do this. Two open source examples are: MkDocs \u2014 A Python-based static site generator. MkDocs is fast and can be customized with corporate branding fairly easily. A wide-range of themes are also available. DocFX \u2014 A .NET-based static site generator. DocFX is slightly easier to get up and running. With MkDocs # Markdown content generated with PSDocs for Azure can be published as HTML with MkDocs . MkDocs is a command-line tool that converts markdown into HTML. GitHub Actions Extend your GitHub Actions workflow .github/workflows/publish-docs.yaml created previously by completing the following steps: Add the following steps to install and build documentation with MkDocs. - name : Setup Python uses : actions/setup-python@v2.2.2 with : python-version : '3.9' architecture : 'x64' - name : Install dependencies run : | python3 -m pip install --upgrade pip python3 -m pip install wheel python3 -m pip install -r requirements-docs.txt - name : Build site run : mkdocs build Create a requirements-docs.txt file in the root of the repository. This file is used by Python to install the required package dependencies. mkdocs==1.2.1 mkdocs-material==7.1.8 pymdown-extensions==8.2 mkdocs-git-revision-date-plugin==0.3.1 mdx-truly-sane-lists==1.2 mkdocs-awesome-pages-plugin==2.5.0 Create a mkdocs.yaml file in the root of the repository. This file configures MkDocs. By configuring this file you can change common settings such as theme and layout. site_name : Contoso Docs for Azure site_url : https://docs.contoso.com/ site_description : Azure documentation for Contoso's modern cloud environment. repo_url : https://github.com/Azure/PSDocs.Azure/ edit_uri : '' theme : name : material font : text : Roboto palette : primary : blue icon : repo : fontawesome/brands/github logo : material/microsoft-azure features : - navigation.instant - navigation.indexes - navigation.sections : level : 1 - navigation.tabs markdown_extensions : - toc : permalink : '#' separator : '-' plugins : - search - git-revision-date - awesome-pages Publishing docs # With documentation generated as HTML the content can be published to an Azure web app. GitHub Actions Extend your GitHub Actions workflow .github/workflows/publish-docs.yaml created previously by completing the following steps: Add the following steps to publish documentation to Azure App Service. - name : Azure Login uses : azure/login@v1.1 with : creds : ${{ secrets.AZURE_CREDENTIALS }} - name : Publish to Azure run : | cd ./site az webapp up -l eastus -n '<enter>' -g '<enter>' --subscription '<enter>' --html Create an deployment credentials AZURE_CREDENTIALS for the workflow to use to authenticate to Azure. Set -n with the name of the Web App. Set -g with the name of the Resource Group containing the Web App. Set --subscription with the name or GUID of the subscription to deploy to. Configuring authorization # Azure Web Apps have built-in support for integrated with Azure AD. By using this feature Azure AD takes care of all the heavy lifting in regards to auth. Read Configure your App Service or Azure Functions app to use Azure AD login to find out how to configure it.","title":"Publish to Azure Web App"},{"location":"publish/azure-webapp/#publish-to-azure-web-app","text":"Markdown generated with PSDocs for Azure can be published as HTML for viewing with Azure App Service. Using Azure App Service our docs site can be secured for internal use or shared with authorized guests. Abstract This topic covers using a pipeline to publish HTML generated by PSDocs for Azure into an Azure Web App.","title":"Publish to Azure Web App"},{"location":"publish/azure-webapp/#generating-docs-site","text":"To publish documentation to an Azure Web App, we need to generate HTML from markdown. There are several widely used tools that help you do this. Two open source examples are: MkDocs \u2014 A Python-based static site generator. MkDocs is fast and can be customized with corporate branding fairly easily. A wide-range of themes are also available. DocFX \u2014 A .NET-based static site generator. DocFX is slightly easier to get up and running.","title":"Generating docs site"},{"location":"publish/azure-webapp/#with-mkdocs","text":"Markdown content generated with PSDocs for Azure can be published as HTML with MkDocs . MkDocs is a command-line tool that converts markdown into HTML. GitHub Actions Extend your GitHub Actions workflow .github/workflows/publish-docs.yaml created previously by completing the following steps: Add the following steps to install and build documentation with MkDocs. - name : Setup Python uses : actions/setup-python@v2.2.2 with : python-version : '3.9' architecture : 'x64' - name : Install dependencies run : | python3 -m pip install --upgrade pip python3 -m pip install wheel python3 -m pip install -r requirements-docs.txt - name : Build site run : mkdocs build Create a requirements-docs.txt file in the root of the repository. This file is used by Python to install the required package dependencies. mkdocs==1.2.1 mkdocs-material==7.1.8 pymdown-extensions==8.2 mkdocs-git-revision-date-plugin==0.3.1 mdx-truly-sane-lists==1.2 mkdocs-awesome-pages-plugin==2.5.0 Create a mkdocs.yaml file in the root of the repository. This file configures MkDocs. By configuring this file you can change common settings such as theme and layout. site_name : Contoso Docs for Azure site_url : https://docs.contoso.com/ site_description : Azure documentation for Contoso's modern cloud environment. repo_url : https://github.com/Azure/PSDocs.Azure/ edit_uri : '' theme : name : material font : text : Roboto palette : primary : blue icon : repo : fontawesome/brands/github logo : material/microsoft-azure features : - navigation.instant - navigation.indexes - navigation.sections : level : 1 - navigation.tabs markdown_extensions : - toc : permalink : '#' separator : '-' plugins : - search - git-revision-date - awesome-pages","title":"With MkDocs"},{"location":"publish/azure-webapp/#publishing-docs","text":"With documentation generated as HTML the content can be published to an Azure web app. GitHub Actions Extend your GitHub Actions workflow .github/workflows/publish-docs.yaml created previously by completing the following steps: Add the following steps to publish documentation to Azure App Service. - name : Azure Login uses : azure/login@v1.1 with : creds : ${{ secrets.AZURE_CREDENTIALS }} - name : Publish to Azure run : | cd ./site az webapp up -l eastus -n '<enter>' -g '<enter>' --subscription '<enter>' --html Create an deployment credentials AZURE_CREDENTIALS for the workflow to use to authenticate to Azure. Set -n with the name of the Web App. Set -g with the name of the Resource Group containing the Web App. Set --subscription with the name or GUID of the subscription to deploy to.","title":"Publishing docs"},{"location":"publish/azure-webapp/#configuring-authorization","text":"Azure Web Apps have built-in support for integrated with Azure AD. By using this feature Azure AD takes care of all the heavy lifting in regards to auth. Read Configure your App Service or Azure Functions app to use Azure AD login to find out how to configure it.","title":"Configuring authorization"},{"location":"publish/blob-storage/","text":"Publish to Azure Storage # After generating markdown from Azure templates using you may want to publish these files for consumption. A simple approach is to publish the files directly to Azure Blob Storage. Abstract This topic covers using a pipeline to publish markdown generated by PSDocs for Azure to blob storage. GitHub Actions Extend your GitHub Actions workflow .github/workflows/publish-docs.yaml created previously by completing the following steps: Add a new step to upload files to storage. - name : 'Copy files to Azure Storage' uses : bacongobbler/azure-blob-storage-upload@v1.1.1 with : connection_string : ${{ secrets.STORAGE_ACCOUNT_SECRET }} container_name : docs source_dir : 'out/docs/*' Create an encrypted secret STORAGE_ACCOUNT_SECRET for the action to use. The secret value is a connection string with permissions to uploads files to the storage account. The bacongobbler/azure-blob-storage-upload action is used to upload the markdown files to the docs blob storage container. Example name : Publish docs on : push : branches : [ main ] jobs : publish : name : Publish runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - name : Generate docs run : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } shell : pwsh - name : 'Copy files to Azure Storage' uses : bacongobbler/azure-blob-storage-upload@v1.1.1 with : connection_string : ${{ secrets.STORAGE_ACCOUNT_SECRET }} container_name : docs source_dir : 'out/docs/*' Azure Pipelines Extend your Azure DevOps YAML pipeline .azure-pipelines/publish-docs.yaml created previously by completing the following steps: Add a new step to upload files to storage. - task : AzureFileCopy@4 displayName : 'Copy files to Azure Storage' inputs : SourcePath : 'out/docs/*' azureSubscription : '<enter>' Destination : 'AzureBlob' storage : '<enter>' ContainerName : 'docs' Set azureSubscription and storage inputs with the name of your Azure service connection and storage account. The AzureFileCopy task is used to upload the markdown files to the docs blob storage container. Example jobs : - job : 'Publish' displayName : 'Generate ARM template docs' pool : vmImage : 'windows-2019' steps : # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - powershell : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } displayName : 'Generate docs' - task : AzureFileCopy@4 displayName : 'Copy files to Azure Storage' inputs : SourcePath : 'out/docs/*' azureSubscription : '<enter>' Destination : 'AzureBlob' storage : '<enter>' ContainerName : 'docs'","title":"Publish to Azure Storage"},{"location":"publish/blob-storage/#publish-to-azure-storage","text":"After generating markdown from Azure templates using you may want to publish these files for consumption. A simple approach is to publish the files directly to Azure Blob Storage. Abstract This topic covers using a pipeline to publish markdown generated by PSDocs for Azure to blob storage. GitHub Actions Extend your GitHub Actions workflow .github/workflows/publish-docs.yaml created previously by completing the following steps: Add a new step to upload files to storage. - name : 'Copy files to Azure Storage' uses : bacongobbler/azure-blob-storage-upload@v1.1.1 with : connection_string : ${{ secrets.STORAGE_ACCOUNT_SECRET }} container_name : docs source_dir : 'out/docs/*' Create an encrypted secret STORAGE_ACCOUNT_SECRET for the action to use. The secret value is a connection string with permissions to uploads files to the storage account. The bacongobbler/azure-blob-storage-upload action is used to upload the markdown files to the docs blob storage container. Example name : Publish docs on : push : branches : [ main ] jobs : publish : name : Publish runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - name : Generate docs run : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } shell : pwsh - name : 'Copy files to Azure Storage' uses : bacongobbler/azure-blob-storage-upload@v1.1.1 with : connection_string : ${{ secrets.STORAGE_ACCOUNT_SECRET }} container_name : docs source_dir : 'out/docs/*' Azure Pipelines Extend your Azure DevOps YAML pipeline .azure-pipelines/publish-docs.yaml created previously by completing the following steps: Add a new step to upload files to storage. - task : AzureFileCopy@4 displayName : 'Copy files to Azure Storage' inputs : SourcePath : 'out/docs/*' azureSubscription : '<enter>' Destination : 'AzureBlob' storage : '<enter>' ContainerName : 'docs' Set azureSubscription and storage inputs with the name of your Azure service connection and storage account. The AzureFileCopy task is used to upload the markdown files to the docs blob storage container. Example jobs : - job : 'Publish' displayName : 'Generate ARM template docs' pool : vmImage : 'windows-2019' steps : # Generate markdown files using PSDocs # Scan for Azure template file recursively in the templates/ directory # Then generate a docs using a standard naming convention. i.e. <name>_<version>.md - powershell : | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force; Get-AzDocTemplateFile -Path templates/ | ForEach-Object { Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath'; } displayName : 'Generate docs' - task : AzureFileCopy@4 displayName : 'Copy files to Azure Storage' inputs : SourcePath : 'out/docs/*' azureSubscription : '<enter>' Destination : 'AzureBlob' storage : '<enter>' ContainerName : 'docs'","title":"Publish to Azure Storage"},{"location":"publish/devops-wiki/","text":"Publish to Azure DevOps Wiki # Markdown generated with PSDocs for Azure can be published as wiki content for viewing with Azure DevOps. Abstract This topic covers using a pipeline to publish markdown generated by PSDocs for Azure into an Azure DevOps Wiki. Coming soon .","title":"Publish to Azure DevOps Wiki"},{"location":"publish/devops-wiki/#publish-to-azure-devops-wiki","text":"Markdown generated with PSDocs for Azure can be published as wiki content for viewing with Azure DevOps. Abstract This topic covers using a pipeline to publish markdown generated by PSDocs for Azure into an Azure DevOps Wiki. Coming soon .","title":"Publish to Azure DevOps Wiki"}]}