{"0": {
    "doc": "Get-AzDocTemplateFile",
    "title": "Get-AzDocTemplateFile",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/"
  },"1": {
    "doc": "Get-AzDocTemplateFile",
    "title": "SYNOPSIS",
    "content": "Get Azure template files within a directory structure. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#synopsis",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#synopsis"
  },"2": {
    "doc": "Get-AzDocTemplateFile",
    "title": "SYNTAX",
    "content": "Get-AzDocTemplateFile [[-InputPath] &lt;String[]&gt;] [[-Path] &lt;String&gt;] [&lt;CommonParameters&gt;] . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#syntax",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#syntax"
  },"3": {
    "doc": "Get-AzDocTemplateFile",
    "title": "DESCRIPTION",
    "content": "Gets any Azure Resource Manager (ARM) template files found within the search path. By default, the current working path is used. When a JSON file is found the schema is compared to determine if it is a valid ARM template file. JSON files without a valid schema are ignored. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#description",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#description"
  },"4": {
    "doc": "Get-AzDocTemplateFile",
    "title": "EXAMPLES",
    "content": "Example 1 . PS C:\\&gt; Get-AzDocTemplateFile . Get a list of template files within the current working directory. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#examples",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#examples"
  },"5": {
    "doc": "Get-AzDocTemplateFile",
    "title": "PARAMETERS",
    "content": "-InputPath . A filter for finding template files within the search path. Type: String[] Parameter Sets: (All) Aliases: f, TemplateFile, FullName Required: False Position: 1 Default value: *.json Accept pipeline input: True (ByPropertyName) Accept wildcard characters: True . -Path . The path to search for template files within. By default, the current working path is used. Type: String Parameter Sets: (All) Aliases: p Required: False Position: 0 Default value: $PWD Accept pipeline input: False Accept wildcard characters: False . CommonParameters . This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#parameters",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#parameters"
  },"6": {
    "doc": "Get-AzDocTemplateFile",
    "title": "INPUTS",
    "content": "System.String[] . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#inputs",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#inputs"
  },"7": {
    "doc": "Get-AzDocTemplateFile",
    "title": "OUTPUTS",
    "content": "PSDocs.Azure.Data.Metadata.ITemplateLink . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#outputs",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#outputs"
  },"8": {
    "doc": "Get-AzDocTemplateFile",
    "title": "NOTES",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#notes",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#notes"
  },"9": {
    "doc": "Get-AzDocTemplateFile",
    "title": "RELATED LINKS",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/Get-AzDocTemplateFile/#related-links",
    "relUrl": "/docs/commands/en-US/Get-AzDocTemplateFile/#related-links"
  },"10": {
    "doc": "PSDocs.Azure Module",
    "title": "PSDocs.Azure Module",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/PSDocs.Azure/",
    "relUrl": "/docs/commands/en-US/PSDocs.Azure/"
  },"11": {
    "doc": "PSDocs.Azure Module",
    "title": "Description",
    "content": "Generate documentation from Azure infrastructure as code (IaC) artifacts. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/PSDocs.Azure/#description",
    "relUrl": "/docs/commands/en-US/PSDocs.Azure/#description"
  },"12": {
    "doc": "PSDocs.Azure Module",
    "title": "PSDocs.Azure Cmdlets",
    "content": "Get-AzDocTemplateFile . Get Azure template files. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/commands/en-US/PSDocs.Azure/#psdocsazure-cmdlets",
    "relUrl": "/docs/commands/en-US/PSDocs.Azure/#psdocsazure-cmdlets"
  },"13": {
    "doc": "v1",
    "title": "Container Registry",
    "content": ". Create or update a Container Registry. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/acr/acr_v1/#container-registry",
    "relUrl": "/docs/templates/acr/acr_v1/#container-registry"
  },"14": {
    "doc": "v1",
    "title": "Parameters",
    "content": "| Parameter name | Description | . | registryName | Required. The name of the container registry. | . | location | Optional. The location to deploy the container registry. | . | registrySku | Optional. The container registry SKU. | . | tags | Optional. Tags to apply to the resource. | . registryName . Required. The name of the container registry. location . Optional. The location to deploy the container registry. | Default value: [resourceGroup().location] | . registrySku . Optional. The container registry SKU. | Default value: Basic . | Allowed values: Basic, Standard, Premium . | . tags . Optional. Tags to apply to the resource. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/acr/acr_v1/#parameters",
    "relUrl": "/docs/templates/acr/acr_v1/#parameters"
  },"15": {
    "doc": "v1",
    "title": "Snippets",
    "content": "Parameter file . { \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"template\": \"templates/acr/v1/template.json\" }, \"parameters\": { \"registryName\": { \"value\": \"&lt;name&gt;\" }, \"registrySku\": { \"value\": \"Basic\" }, \"tags\": { \"value\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } } } } . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/acr/acr_v1/#snippets",
    "relUrl": "/docs/templates/acr/acr_v1/#snippets"
  },"16": {
    "doc": "v1",
    "title": "v1",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/acr/acr_v1/",
    "relUrl": "/docs/templates/acr/acr_v1/"
  },"17": {
    "doc": "Storage Account",
    "title": "Storage Account",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/storage/",
    "relUrl": "/docs/templates/storage/"
  },"18": {
    "doc": "Container Registry",
    "title": "Container Registry",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/acr/",
    "relUrl": "/docs/templates/acr/"
  },"19": {
    "doc": "Key Vault",
    "title": "Key Vault",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/keyvault/",
    "relUrl": "/docs/templates/keyvault/"
  },"20": {
    "doc": "Home",
    "title": "Git it done",
    "content": "Focus on building great solutions on Azure instead of writing documentation. PSDocs for Azure automatically generates documentation for Azure infrastructure as code (IaC) artifacts. Get started now View it on GitHub . ",
    "url": "https://azure.github.io/PSDocs.Azure/#git-it-done",
    "relUrl": "/#git-it-done"
  },"21": {
    "doc": "Home",
    "title": "Getting started",
    "content": "Annotate templates file . In its simplest structure, an Azure template has the following elements: . { \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\", \"contentVersion\": \"1.0.0.0\", \"parameters\": { }, \"variables\": { }, \"functions\": [ ], \"resources\": [ ], \"outputs\": { } } . Additionally a metadata property can be added in most places throughout the template. For example: . { \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"name\": \"Storage Account\", \"description\": \"Create or update a Storage Account.\" }, \"parameters\": { \"storageAccountName\": { \"type\": \"string\", \"metadata\": { \"description\": \"Required. The name of the Storage Account.\" } }, \"tags\": { \"type\": \"object\", \"defaultValue\": { }, \"metadata\": { \"description\": \"Optional. Tags to apply to the resource.\", \"example\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } } } }, \"resources\": [ ], \"outputs\": { \"resourceId\": { \"type\": \"string\", \"value\": \"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]\", \"metadata\": { \"description\": \"A unique resource identifier for the storage account.\" } } } } . PSDocs interprets the template structure and metadata to generate documentation as markdown. Generating documentation as markdown allows you to publish web-based content on a variety of platforms. PSDocs supports the following metadata: . | Field | Scope | Type | Description | . | name | Template | string | Used for markdown page title. | . | description | Template | string | Used as the top description for the markdown page. | . | description | Parameter | string | Used as the description for the parameter. | . | example | Parameter | string, boolean, object, or array | An example use of the parameter. The example is included in the JSON snippet. If an example is not included the default value is used instead. | . | ignore | Parameter | boolean | When true the parameter is not included in the JSON snippet. | . | description | Output | string | Used as the description for the output. | . Using with GitHub Actions . The following example shows how to setup GitHub Actions to copy generated markdown files to an Azure blob storage account. | See Creating a workflow file to create an empty workflow file. | Add a PowerShell step to: . | Install PSDocs.Azure module. | Scan for Azure template file recursively in the templates/ directory. | Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md | Generate the markdown to a specific directory. | . | Set the STORAGEACCOUNTSECRET action secret. | Use an Azure Blob Storage Upload action to copy the generated markdown to an Azure Storage Blob container. | . For example: . # Example: .github/workflows/arm-docs.yaml name: Generate ARM templates docs on: push: branches: [ main ] jobs: arm_docs: name: Generate ARM template docs runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 # STEP 1: Generate Markdowns using PSDocs - name: Generate ARM markdowns run: | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -force; # Scan for Azure template file recursively in the templates/ directory Get-AzDocTemplateFile -Path templates/ | ForEach-Object { # Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md $template = Get-Item -Path $_.TemplateFile; $templateName = $template.Directory.Parent.Name; $version = $template.Directory.Name; $docName = \"$($templateName)_$version\"; # Generate markdown Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName; } shell: pwsh # STEP 2: Copy files to a storage account - name: Copy files to a storage account uses: bacongobbler/azure-blob-storage-upload@v1.1.1 with: connection_string: $ container_name: ps-docs source_dir: 'out/docs/*' . Using with Azure Pipelines . The following example shows how to setup Azure Pipelines to generate ARM template documentation in the markdown format. This example copies the generated markdown files to a designated blob storage. | Create a new YAML pipeline with the Starter pipeline template. | Add a PowerShell task to: . | Install PSDocs.Azure module. | Scan for Azure template file recursively in the templates/ directory. | Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md | Generate the markdown to a specific directory. | . | Add an AzureFileCopy task to copy the generated markdown to an Azure Storage Blob container. | . For example: . # Example: .azure-pipelines/psdocs-blobstorage.yaml jobs: - job: 'generate_arm_template_documentation' displayName: 'Generate ARM template docs' pool: vmImage: 'windows-2019' steps: # STEP 1: Generate Markdowns using PSDocs - powershell: | Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -force; # Scan for Azure template file recursively in the templates/ directory Get-AzDocTemplateFile -Path templates/ | ForEach-Object { # Generate a standard name of the markdown file. i.e. &lt;name&gt;_&lt;version&gt;.md $template = Get-Item -Path $_.TemplateFile; $templateName = $template.Directory.Parent.Name; $version = $template.Directory.Name; $docName = \"$($templateName)_$version\"; # Generate markdown Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $template.FullName -InstanceName $docName; } displayName: 'Export template data' # STEP 2: Copy files to a storage account - task: AzureFileCopy@4 displayName: 'Copy files to a storage account blob container' inputs: SourcePath: 'out/docs/*' azureSubscription: 'psdocstest' Destination: 'AzureBlob' storage: '&lt;storageaccountname&gt;' ContainerName: 'ps-docs' . ",
    "url": "https://azure.github.io/PSDocs.Azure/#getting-started",
    "relUrl": "/#getting-started"
  },"22": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/",
    "relUrl": "/"
  },"23": {
    "doc": "v1",
    "title": "Key Vault",
    "content": ". Create or update a Key Vault. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/keyvault/keyvault_v1/#key-vault",
    "relUrl": "/docs/templates/keyvault/keyvault_v1/#key-vault"
  },"24": {
    "doc": "v1",
    "title": "Parameters",
    "content": "| Parameter name | Description | . | vaultName | Required. The name of the Key Vault. | . | location | Optional. The Azure region to deploy to. | . | accessPolicies | Optional. The access policies defined for this vault. | . | useDeployment | Optional. Determines if Azure can deploy certificates from this Key Vault. | . | useTemplate | Optional. Determines if templates can reference secrets from this Key Vault. | . | useDiskEncryption | Optional. Determines if this Key Vault can be used for Azure Disk Encryption. | . | useSoftDelete | Optional. Determine if soft delete is enabled on this Key Vault. | . | usePurgeProtection | Optional. Determine if purge protection is enabled on this Key Vault. | . | networkAcls | Optional. The network firewall defined for this vault. | . | workspaceId | Optional. The workspace to store audit logs. | . | tags | Optional. Tags to apply to the resource. | . vaultName . Required. The name of the Key Vault. location . Optional. The Azure region to deploy to. | Default value: [resourceGroup().location] | . accessPolicies . Optional. The access policies defined for this vault. useDeployment . Optional. Determines if Azure can deploy certificates from this Key Vault. | Default value: False | . useTemplate . Optional. Determines if templates can reference secrets from this Key Vault. | Default value: False | . useDiskEncryption . Optional. Determines if this Key Vault can be used for Azure Disk Encryption. | Default value: False | . useSoftDelete . Optional. Determine if soft delete is enabled on this Key Vault. | Default value: True | . usePurgeProtection . Optional. Determine if purge protection is enabled on this Key Vault. | Default value: True | . networkAcls . Optional. The network firewall defined for this vault. | Default value: @{defaultAction=Allow; bypass=AzureServices; ipRules=System.Object[]; virtualNetworkRules=System.Object[]} | . workspaceId . Optional. The workspace to store audit logs. tags . Optional. Tags to apply to the resource. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/keyvault/keyvault_v1/#parameters",
    "relUrl": "/docs/templates/keyvault/keyvault_v1/#parameters"
  },"25": {
    "doc": "v1",
    "title": "Outputs",
    "content": "| Name | Type | Description | . | resourceId | string |   | . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/keyvault/keyvault_v1/#outputs",
    "relUrl": "/docs/templates/keyvault/keyvault_v1/#outputs"
  },"26": {
    "doc": "v1",
    "title": "Snippets",
    "content": "Parameter file . { \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"template\": \"templates/keyvault/v1/template.json\" }, \"parameters\": { \"vaultName\": { \"value\": \"&lt;name&gt;\" }, \"accessPolicies\": { \"value\": [ { \"objectId\": \"&lt;object_id&gt;\", \"tenantId\": \"&lt;tenant_id&gt;\", \"permissions\": { \"secrets\": [ \"Get\", \"List\", \"Set\" ] } } ] }, \"useDeployment\": { \"value\": false }, \"useTemplate\": { \"value\": false }, \"useDiskEncryption\": { \"value\": false }, \"networkAcls\": { \"value\": { \"defaultAction\": \"Allow\", \"bypass\": \"AzureServices\", \"ipRules\": [], \"virtualNetworkRules\": [] } }, \"workspaceId\": { \"value\": \"&lt;resource_id&gt;\" }, \"tags\": { \"value\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } } } } . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/keyvault/keyvault_v1/#snippets",
    "relUrl": "/docs/templates/keyvault/keyvault_v1/#snippets"
  },"27": {
    "doc": "v1",
    "title": "v1",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/keyvault/keyvault_v1/",
    "relUrl": "/docs/templates/keyvault/keyvault_v1/"
  },"28": {
    "doc": "v1",
    "title": "Storage Account",
    "content": "Create or update a Storage Account. This template deploys a Storage Account including blob containers and files shares. Encryption in transit it enabled using a minimum of TLS 1.2. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/storage/storage_v1/#storage-account",
    "relUrl": "/docs/templates/storage/storage_v1/#storage-account"
  },"29": {
    "doc": "v1",
    "title": "Parameters",
    "content": "| Parameter name | Description | . | storageAccountName | Required. The name of the Storage Account. | . | location | Optional. The Azure region to deploy to. | . | sku | Optional. Create the Storage Account as LRS or GRS. | . | suffixLength | Optional. Determine how many additional characters are added to the storage account name as a suffix. | . | containers | Optional. An array of storage containers to create on the storage account. | . | lifecycleRules | Optional. An array of lifecycle management policies for the storage account. | . | blobSoftDeleteDays | Optional. The number of days to retain deleted blobs. When set to 0, soft delete is disabled. | . | containerSoftDeleteDays | Optional. The number of days to retain deleted containers. When set to 0, soft delete is disabled. | . | shares | Optional. An array of file shares to create on the storage account. | . | useLargeFileShares | Optional. Determines if large file shares are enabled. This can not be disabled once enabled. | . | shareSoftDeleteDays | Optional. The number of days to retain deleted shares. When set to 0, soft delete is disabled. | . | allowBlobPublicAccess | Optional. Determines if any containers can be configured with the anonymous access types of blob or container. | . | keyVaultPrincipalId | Optional. Set to the objectId of Azure Key Vault to delegated permission for use with Key Managed Storage Accounts. | . | tags | Optional. Tags to apply to the resource. | . storageAccountName . Required. The name of the Storage Account. location . Optional. The Azure region to deploy to. | Default value: [resourceGroup().location] | . sku . Optional. Create the Storage Account as LRS or GRS. | Default value: Standard_LRS . | Allowed values: Standard_LRS, Standard_GRS . | . suffixLength . Optional. Determine how many additional characters are added to the storage account name as a suffix. | Default value: 0 | . containers . Optional. An array of storage containers to create on the storage account. lifecycleRules . Optional. An array of lifecycle management policies for the storage account. blobSoftDeleteDays . Optional. The number of days to retain deleted blobs. When set to 0, soft delete is disabled. | Default value: 0 | . containerSoftDeleteDays . Optional. The number of days to retain deleted containers. When set to 0, soft delete is disabled. | Default value: 0 | . shares . Optional. An array of file shares to create on the storage account. useLargeFileShares . Optional. Determines if large file shares are enabled. This can not be disabled once enabled. | Default value: False | . shareSoftDeleteDays . Optional. The number of days to retain deleted shares. When set to 0, soft delete is disabled. | Default value: 0 | . allowBlobPublicAccess . Optional. Determines if any containers can be configured with the anonymous access types of blob or container. | Default value: False | . keyVaultPrincipalId . Optional. Set to the objectId of Azure Key Vault to delegated permission for use with Key Managed Storage Accounts. tags . Optional. Tags to apply to the resource. ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/storage/storage_v1/#parameters",
    "relUrl": "/docs/templates/storage/storage_v1/#parameters"
  },"30": {
    "doc": "v1",
    "title": "Outputs",
    "content": "| Name | Type | Description | . | blobEndpoint | string | A URI to the blob storage endpoint. | . | resourceId | string | A unique resource identifier for the storage account. | . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/storage/storage_v1/#outputs",
    "relUrl": "/docs/templates/storage/storage_v1/#outputs"
  },"31": {
    "doc": "v1",
    "title": "Snippets",
    "content": "Parameter file . { \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#\", \"contentVersion\": \"1.0.0.0\", \"metadata\": { \"template\": \"templates/storage/v1/template.json\" }, \"parameters\": { \"storageAccountName\": { \"value\": \"\" }, \"sku\": { \"value\": \"Standard_LRS\" }, \"containers\": { \"value\": [ { \"name\": \"logs\", \"publicAccess\": \"None\", \"metadata\": {} } ] }, \"lifecycleRules\": { \"value\": { \"enabled\": true, \"name\": \"&lt;rule_name&gt;\", \"type\": \"Lifecycle\", \"definition\": { \"actions\": { \"baseBlob\": { \"delete\": { \"daysAfterModificationGreaterThan\": 7 } } }, \"filters\": { \"blobTypes\": [ \"blockBlob\" ], \"prefixMatch\": [ \"logs/\" ] } } } }, \"blobSoftDeleteDays\": { \"value\": 7 }, \"containerSoftDeleteDays\": { \"value\": 7 }, \"shares\": { \"value\": [ { \"name\": \"&lt;share_name&gt;\", \"shareQuota\": 5, \"metadata\": {} } ] }, \"shareSoftDeleteDays\": { \"value\": 7 }, \"allowBlobPublicAccess\": { \"value\": false }, \"tags\": { \"value\": { \"service\": \"&lt;service_name&gt;\", \"env\": \"prod\" } } } } . ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/storage/storage_v1/#snippets",
    "relUrl": "/docs/templates/storage/storage_v1/#snippets"
  },"32": {
    "doc": "v1",
    "title": "v1",
    "content": " ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/templates/storage/storage_v1/",
    "relUrl": "/docs/templates/storage/storage_v1/"
  },"33": {
    "doc": "Change log",
    "title": "Change log",
    "content": "# Change log ## Unreleased ## v0.3.0-B2103011 (pre-release) What's changed since v0.2.0: - New Features: - Added support for naming document by parent path using conventions. [#43](https://github.com/Azure/PSDocs.Azure/issues/43) - Add the `-Convention` parameter with `Azure.NameByParentPath` to use. - See [about_PSDocs_Azure_Conventions] for details. - General improvements: - Added support for reading template metadata from `metadata.json`. [#32](https://github.com/Azure/PSDocs.Azure/issues/32) - This adds additional compatibility for the Azure Quickstart templates repository. - Additional metadata from `metadata.json` will be read when it exists. - Template metadata take priority over `metadata.json`. - Added support for the `summary` template metadata property. [#60](https://github.com/Azure/PSDocs.Azure/issues/60) - The `summary` template metadata property is intended to provide a short description of the template. - Use the `description` template metadata property to provide a detailed description of the template. ## v0.2.0 What's changed since v0.1.0: - New Features: - Added the ability to enable manual command line snippet. [#40](https://github.com/Azure/PSDocs.Azure/issues/40) - To enable parameter file snippet set configuration `AZURE_USE_COMMAND_LINE_SNIPPET`. - See [about_PSDocs_Azure_Configuration] for details. - Added the ability to disable parameter file snippet. [#31](https://github.com/Azure/PSDocs.Azure/issues/31) - To disable parameter file snippet set configuration `AZURE_USE_PARAMETER_FILE_SNIPPET`. - See [about_PSDocs_Azure_Configuration] for details. - Added the ability to include badges in template document. [#30](https://github.com/Azure/PSDocs.Azure/issues/30) - Set the `.ps-docs/azure-template-badges.md` file to include badge content. - See [about_PSDocs_Azure_Badges] for details. - Template outputs are added to generated document. [#28](https://github.com/Azure/PSDocs.Azure/issues/28) - General Improvements - Minor update to the documentation to include OutputPath to generate README.md [#50](https://github.com/Azure/PSDocs.Azure/issues/50) - Engineering: - Bump PSDocs dependency to v0.8.0. [#42](https://github.com/Azure/PSDocs.Azure/issues/42) - Bug fixes: - Fixed snippet with short relative template causes exception. [#26](https://github.com/Azure/PSDocs.Azure/issues/26) - Fixed cannot bind argument when metadata name is not set. [#35](https://github.com/Azure/PSDocs.Azure/issues/35) What's changed since pre-release v0.2.0-B2102012: - No additional changes. ## v0.2.0-B2102012 (pre-release) What's changed since pre-release v0.2.0-B2102005: - New features: - Added the ability to enable manual command line snippet. [#40](https://github.com/Azure/PSDocs.Azure/issues/40) - To enable parameter file snippet set configuration `AZURE_USE_COMMAND_LINE_SNIPPET`. - See [about_PSDocs_Azure_Configuration] for details. ## v0.2.0-B2102005 (pre-release) What's changed since pre-release v0.2.0-B2101002: - New features: - Added the ability to disable parameter file snippet. [#31](https://github.com/Azure/PSDocs.Azure/issues/31) - To disable parameter file snippet set configuration `AZURE_USE_PARAMETER_FILE_SNIPPET`. - See [about_PSDocs_Azure_Configuration] for details. - Added the ability to include badges in template document. [#30](https://github.com/Azure/PSDocs.Azure/issues/30) - Set the `.ps-docs/azure-template-badges.md` file to include badge content. - See [about_PSDocs_Azure_Badges] for details. - Engineering: - Bump PSDocs dependency to v0.8.0. [#42](https://github.com/Azure/PSDocs.Azure/issues/42) ## v0.2.0-B2101002 (pre-release) What's changed since v0.1.0: - New features: - Template outputs are added to generated document. [#28](https://github.com/Azure/PSDocs.Azure/issues/28) - Bug fixes: - Fixed snippet with short relative template causes exception. [#26](https://github.com/Azure/PSDocs.Azure/issues/26) - Fixed cannot bind argument when metadata name is not set. [#35](https://github.com/Azure/PSDocs.Azure/issues/35) ## v0.1.0 - Initial release. What's changed since pre-release v0.1.0-B2012006: - New features: - Added `Get-AzDocTemplateFile` cmdlet to scan for template files within a path. [#16](https://github.com/Azure/PSDocs.Azure/issues/16) - General improvements: - Added support for document localization and JSON snippet formatting. [#18](https://github.com/Azure/PSDocs.Azure/issues/18) - Engineering: - Bump PSDocs dependency to v0.7.0. ## v0.1.0-B2012006 (pre-release) - Initial pre-release. [about_PSDocs_Azure_Configuration]: /PSDocs.Azure/docs/concepts/en-US/about_PSDocs_Azure_Configuration/ [about_PSDocs_Azure_Badges]: /PSDocs.Azure/docs/concepts/en-US/about_PSDocs_Azure_Badges/ [about_PSDocs_Azure_Conventions]: /PSDocs.Azure/docs/concepts/en-US/about_PSDocs_Azure_Conventions/ ",
    "url": "https://azure.github.io/PSDocs.Azure/CHANGELOG/",
    "relUrl": "/CHANGELOG/"
  },"34": {
    "doc": "PSDocs_Azure_Badges",
    "title": "PSDocs_Azure_Badges",
    "content": "# PSDocs_Azure_Badges ## about_PSDocs_Azure_Badges ## SHORT DESCRIPTION Describes how to insert template badges in to documentation. ## LONG DESCRIPTION PSDocs allows external files to be included in Azure template documentation. Commonly this concept is used to include images that represent the validation status of the template. These images, are commonly referred to as _badges_. PSDocs can include badges that have been generated by an external validation tool. To include badge markdown: - Create a sub-directory called `.ps-docs` in the working path of PSDocs. This would normally be root directory (`$PWD`) of the repository where your Azure template are stored. - Create a file named `azure-template-badges.md` within the `.ps-docs` sub-directory. - When creating all files and folder use lower case names. The contents of this file is automatically inserted in generated output after the title but before description. ### Include badges To include badge images use standard markdown syntax within the `azure-template-badges.md` file. > Markdown uses links to reference images. > A person viewing the page must have permissions to view the source image. > If not, the badge may be shown as a broken or placeholder image. For example: ```markdown ![label](https://image_uri) ``` For example, a Github Actions badge for PSDocs.Azure would be: ```markdown ![Analyze](https://github.com/Azure/PSDocs.Azure/workflows/Analyze/badge.svg) ``` To include badges images with a clickable link use standard markdown syntax: ```markdown [![label](https://image_uri)](https://link_uri) ``` For example, an Azure Pipelines badge for PSDocs.Azure would be: ```markdown [![Build Status](https://dev.azure.com/PSDocs/PSDocs.Azure/_apis/build/status/PSDocs.Azure-CI?branchName=refs%2Fpull%2F44%2Fmerge)](https://dev.azure.com/PSDocs/PSDocs.Azure/_build/latest?definitionId=1&branchName=refs%2Fpull%2F44%2Fmerge) ``` ### Dynamic links In additional to inserting static content, some replacement tokens have been defined. When specified within `azure-template-badges.md` each token will be replaced when the file is included. The following replacement tokens have been defined: - `{{ template_path }}` - The relative path of the template directory. - `{{ template_path_encoded }}` - The relative path of the template directory URL encoded. For example, if the template path was `.\\templates\\storage\\v1\\template.json` the following would be used: - `{{ template_path }}` = `templates/storage/v1` - `{{ template_path_encoded }}` = `templates%2fstorage%2fv1` The follow example shows source markdown for including badges: ```markdown ![Best Practice Check](https://azurequickstartsservice.blob.core.windows.net/badges/{{ template_path }}/BestPracticeResult.svg) [![Deploy To Azure](https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2F{{ template_path_encoded }}%2Fazuredeploy.json) ``` After replacement the following would be the resulting output included in the template document: ```markdown ![Best Practice Check](https://azurequickstartsservice.blob.core.windows.net/badges/templates/storage/v1/BestPracticeResult.svg) [![Deploy To Azure](https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2Ftemplates%2fstorage%2fv1%2Fazuredeploy.json) ``` ## NOTE An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Badges.md. ## KEYWORDS - Badge ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/concepts/en-US/about_PSDocs_Azure_Badges/",
    "relUrl": "/docs/concepts/en-US/about_PSDocs_Azure_Badges/"
  },"35": {
    "doc": "PSDocs_Azure_Configuration",
    "title": "PSDocs_Azure_Configuration",
    "content": "# PSDocs_Azure_Configuration ## about_PSDocs_Azure_Configuration ## SHORT DESCRIPTION Describes PSDocs configuration options specific to `PSDocs.Azure`. ## LONG DESCRIPTION PSDocs exposes configuration options that can be used to customize execution of document generation. This topic describes what configuration options are available. PSDocs configuration options can be specified by setting the configuration option in `ps-docs.yaml`. Additionally, configuration options can be configured in a baseline or set at runtime. For details of setting configuration options see [PSDocs options][options] The following configurations options are available for use: - [AZURE_USE_PARAMETER_FILE_SNIPPET](#azure_use_parameter_file_snippet) - [AZURE_USE_COMMAND_LINE_SNIPPET](#azure_use_command_line_snippet) ### AZURE_USE_PARAMETER_FILE_SNIPPET This configuration option determines if a parameter file snippet is added to documentation. By default, a snippet is generated. To prevent a parameter file snippet being generated, set this option to `false`. Syntax: ```yaml configuration: AZURE_USE_PARAMETER_FILE_SNIPPET: bool # Either true or false ``` Default: ```yaml # YAML: The default AZURE_USE_PARAMETER_FILE_SNIPPET configuration option configuration: AZURE_USE_PARAMETER_FILE_SNIPPET: true ``` Example: ```yaml # YAML: Prevent parameter file snippet from being generated configuration: AZURE_USE_PARAMETER_FILE_SNIPPET: false ``` ### AZURE_USE_COMMAND_LINE_SNIPPET This configuration option determines if a command line snippet is added to documentation. By default, this command line snippet is not generated. To generate command line snippet, set this option to `true`. Syntax: ```yaml configuration: AZURE_USE_COMMAND_LINE_SNIPPET: bool # Either true or false ``` Default: ```yaml # YAML: The default AZURE_USE_COMMAND_LINE_SNIPPET configuration option is to disable generation configuration: AZURE_USE_COMMAND_LINE_SNIPPET: false ``` Example: ```yaml # YAML: To enable command line snippet configuration: AZURE_USE_COMMAND_LINE_SNIPPET: true ``` ## NOTE An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md. ## KEYWORDS - Configuration - Document - Snippet [options]: https://github.com/BernieWhite/PSDocs/blob/main/docs/concepts/PSDocs/en-US/about_PSDocs_Configuration.md ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/concepts/en-US/about_PSDocs_Azure_Configuration/",
    "relUrl": "/docs/concepts/en-US/about_PSDocs_Azure_Configuration/"
  },"36": {
    "doc": "PSDocs_Azure_Conventions",
    "title": "PSDocs_Azure_Conventions",
    "content": "# PSDocs_Azure_Conventions ## about_PSDocs_Azure_Conventions ## SHORT DESCRIPTION Describes how to use conventions included in `PSDocs.Azure`. ## LONG DESCRIPTION PSDocs for Azure includes conventions that can be included when generating documentation. Conventions alter the default pipeline to customize it for a specific situation. When running `Invoke-PSDocument` add the `-Convention` parameter to specify one or more conventions. For example: ```powershell Invoke-PSDocument -Convention 'Azure.NameByParentPath'; ``` ### Azure.NameByParentPath This convention can be used to change the default naming for documents. By default new documents are generated with the `README.md` file name. When the template file is stored under a well-known path `//template.json` or `/template.json`. i.e. `templates/storage/v1/template.json` or `templates/storage/template.json` The `name` and `version` can be used to name the output file. The resulting file name is updated to `_.md`. i.e. `storage_v1.md` For `version` to be detected, the version sub-directory must start with `v` and be followed by a number. When the version sub-directory a not detected the resulting file name is updated to `.md`. i.e. `storage.md` ## NOTE An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Conventions.md. ## KEYWORDS - Convention - NameByParentPath ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/concepts/en-US/about_PSDocs_Azure_Conventions/",
    "relUrl": "/docs/concepts/en-US/about_PSDocs_Azure_Conventions/"
  },"37": {
    "doc": "PSDocs for Azure features",
    "title": "PSDocs for Azure features",
    "content": "# PSDocs for Azure features The following sections describe key features of PSDocs for Azure. - [Ready to go](#ready-to-go) - [DevOps](#devops) - [Cross-platform](#cross-platform) ## Ready to go PSDocs for Azure automatically generates documentation for Azure infrastructure as code (IaC) artifacts. It does this by, reading then processing each artifacts with one or more included documentation templates. Documentation is outputted as _markdown_ a standard easy to read, easy to render format for modern documentation. Currently the following infrastructure code artifacts are supported: - Azure Resource Manager (ARM) template files. As new features are added and improved, download the latest PowerShell module to start using them. ## DevOps Azure infrastructure code such as ARM template supports a number of ways to self document in code. PSDocs uses these existing features and makes them easier to consume. Document generation can be integrated into a continuous integration (CI) pipeline to: - **Shift-left:** Identify documentation issues and provide fast feedback in pull requests. ## Cross-platform PSDocs uses modern PowerShell libraries at its core, allowing it to go anywhere PowerShell can go. PSDocs runs on MacOS, Linux and Windows. PowerShell makes it easy to integrate PSDocs into popular CI systems. To install, use the `Install-Module` cmdlet within PowerShell. For installation options see [install instructions](/PSDocs.Azure/docs/install-instructions/). ## Frequently Asked Questions (FAQ) ### Can PSDocs read from metadata.json? The Azure Quickstart Templates repository uses an additional `metadata.json` to store template metadata. PSDocs doesn't require a `metadata.json` file to exist but will fallback to this file if it exists. For details on `metadata.json` see [Azure Resource Manager QuickStart Templates contributing guide]. PSDocs reads `metadata.json` using the following logic: 1. Metadata is loaded from the template `metadata` property. 2. When `metadata.json` exists, properties are merged with the template metadata. - Properties included in template metadata override properties included from `metadata.json`. - The `$schema` property from `metadata.json` is ignored. - For PSDocs to discover `metadata.json` it must exist in the same directory as the template file. When creating `metadata.json` use only lowercase in the file name. The schema of `metadata.json` differs from template metadata. To maintain compatibility, PSDocs automatically maps the metadata as described in the following table. metadata.json | Template metadata | Description ------------- | ------- | ----------------- | ------ `itemDisplayName` | Maps to | `name` | Used for markdown page title. `summary` | Maps to | `summary` | Used as a short description for the markdown page. `description` | Maps to | `description` | Used as a detailed description for the markdown page. For example: - If `name` exists in template metadata, this will take priority over `itemDisplayName` from `metadata.json`. - If `name` does not exist in template metadata, `itemDisplayName` from `metadata.json` will be used. ### How do I include a badge image? To include a badge image, create the `.ps-docs/azure-template-badges.md` file. Within this file add markdown links to your badge image. Use the following placeholders to reference unique images per template. - `{{ template_path }}` - The relative path of the template directory. - `{{ template_path_encoded }}` - The relative path of the template directory URL encoded. See [about_PSDocs_Azure_Badges] for additional details. ### Can PSDocs generate badges for documentation? No. PSDocs can not generate badge images for you. Once you have generated a badge, PSDocs can include a link to the badge for displaying directly in markdown. [about_PSDocs_Azure_Badges]: /PSDocs.Azure/docs/concepts/en-US/about_PSDocs_Azure_Badges/ [Azure Resource Manager QuickStart Templates contributing guide]: https://github.com/Azure/azure-quickstart-templates/tree/master/1-CONTRIBUTION-GUIDE#metadatajson ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/features/",
    "relUrl": "/docs/features/"
  },"38": {
    "doc": "Install instructions",
    "title": "Install instructions",
    "content": "# Install instructions ## Prerequisites - Windows PowerShell 5.1 with .NET Framework 4.7.2+ or - PowerShell Core 6.2 or greater on Windows, MacOS and Linux or - PowerShell 7.0 or greater on Windows, MacOS and Linux For a list of platforms that PowerShell 7.0 is supported on [see][get-powershell]. The following modules are required for `PSDocs.Azure` to work: - PSDocs The required version of each module will automatically be installed along-side `PSDocs.Azure` when using `Install-Module` or `Update-Module` cmdlets. ## Getting the modules ### PowerShell Gallery Install from [PowerShell Gallery][module] for all users (requires permissions): ```powershell # Install module Install-Module -Name 'PSDocs.Azure' -Repository PSGallery; ``` Install from [PowerShell Gallery][module] for current user only: ```powershell # Install module Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope CurrentUser; ``` Save for offline use from PowerShell Gallery: ```powershell # Save module, in the .\\modules directory Save-Module -Name 'PSDocs', 'PSDocs.Azure' -Path '.\\modules'; ``` > For pre-release versions the `-AllowPrerelease` switch must be added when calling `Install-Module` or `Save-Module`. > > To install pre-release module versions, upgrading to the latest version of _PowerShellGet_ may be required. To do this use: > > `Install-Module -Name PowerShellGet -Repository PSGallery -Scope CurrentUser -Force` ## Building from source To build this module from source run `./build.ps1`. This build script will compile the module and documentation then output the result into `out/modules/PSDocs.Azure`. The following PowerShell modules will be automatically downloaded if the required versions are not present: - PlatyPS - Pester - PSScriptAnalyzer - PowerShellGet - PackageManagement - InvokeBuild These additional modules are only required for building PSRule and are not required for running PSRule. If you are on a network that does not permit Internet access to the PowerShell Gallery, download these modules on an alternative device that has access. The following script can be used to download the required modules to an alternative device. After downloading the modules copy the module directories to devices with restricted Internet access. ```powershell # Save modules, in the .\\modules directory Save-Module -Name PlatyPS, Pester, PSScriptAnalyzer, PowerShellGet, PackageManagement, InvokeBuild -Repository PSGallery -Path '.\\modules'; ``` Additionally .NET Core SDK v3.1 is required.NET Core will not be automatically downloaded and installed. To download and install the latest SDK see [Download .NET Core 3.1][dotnet]. [module]: https://www.powershellgallery.com/packages/PSDocs.Azure [get-powershell]: https://github.com/PowerShell/PowerShell#get-powershell [dotnet]: https://dotnet.microsoft.com/download/dotnet-core/3.1 ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/install-instructions/",
    "relUrl": "/docs/install-instructions/"
  },"39": {
    "doc": "Release process for PSDocs for Azure",
    "title": "Release process for PSDocs for Azure",
    "content": "# Release process for PSDocs for Azure The following sections describe the process for making a new release. - Update [CHANGELOG](/PSDocs.Azure/CHANGELOG/) with all changes since the last release (including all pre-release versions) - Submit a Pull Request for review - Navigate to [Releases](https://github.com/Azure/PSDocs.Azure/releases) and select **Draft a new release** - [SemVer](https://semver.org/) is used to version the releases. To use the correct release/tag the following options are used: - A stable release: increment from the previous release *e.g. v0.2.0* - A pre-release: select the **This is a pre-release** option and select the build version from the previous build in Azure DevOps Pipelines. This version can be found from previous build run. *E.g., for the recent Pull Request go to Pull Request -> Checks -> Analyze -> Azure Pipelines -> PSDocs.Azure-CI Build **[#0.2.0-B2103003](https://github.com/Azure/PSDocs.Azure/pull/52/checks?check_run_id=2066087539)*** - Wait for the deployment to be released in [PowerShell Gallery](https://www.powershellgallery.com/packages/PSDocs.Azure/) - After a successful release, create another PR updating: - [.azure-pipelines/azure-pipelines.yaml](https://github.com/Azure/PSDocs.Azure/blob/main/.azure-pipelines/azure-pipelines.yaml) with the next version increment *e.g. if the newly released version is 0.2.0, set this to `version: '0.3.0'`* ",
    "url": "https://azure.github.io/PSDocs.Azure/docs/release/",
    "relUrl": "/docs/release/"
  }
}
