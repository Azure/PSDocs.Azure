{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"creating-your-pipeline/","title":"Creating your pipeline","text":"<p>You can use PSDocs for Azure to generate documentation from within a continuous integration (CI) pipeline.</p> <p>Abstract</p> <p>This topic covers creating a pipeline to automatically build documentation with PSDocs for Azure. The pipeline:</p> <ul> <li>Installs the <code>PSDocs.Azure</code> module</li> <li>Generates markdown for each Azure template in the <code>templates/</code> sub-directory.</li> </ul> <p>Within the root directory of your Infrastructure as Code (IaC) repository:</p> GitHub Actions <p>Create a new GitHub Actions workflow by creating <code>.github/workflows/publish-docs.yaml</code>. Add the following code to the workflow file.</p> <pre><code>name: Publish docs\non:\n  push:\n    branches: [ main ]\njobs:\n  publish:\n    name: Publish\n    runs-on: ubuntu-latest\n    steps:\n\n    - uses: actions/checkout@v2\n\n    # Generate markdown files using PSDocs\n    # Scan for Azure template file recursively in sub-directories\n    # Then generate a docs using a standard naming convention. i.e. &lt;name&gt;_&lt;version&gt;.md\n    - name: Generate docs\n      uses: microsoft/ps-docs@main\n      with:\n        conventions: Azure.NameByParentPath\n        modules: PSDocs,PSDocs.Azure\n        inputPath: templates/\n        outputPath: out/docs/\n        prerelease: true\n</code></pre> <p>This will automatically install compatible versions of all dependencies.</p> Azure Pipelines <p>Create a new Azure DevOps YAML pipeline by creating <code>.azure-pipelines/publish-docs.yaml</code>. Add the following code to the YAML pipeline file.</p> <pre><code>jobs:\n- job: 'Publish'\n  displayName: 'Generate ARM template docs'\n  pool:\n    vmImage: 'windows-2019'\n  steps:\n\n  # Generate markdown files using PSDocs\n  # Scan for Azure template file recursively in the templates/ directory\n  # Then generate a docs using a standard naming convention. i.e. &lt;name&gt;_&lt;version&gt;.md\n  - powershell: |\n      Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force;\n      Get-AzDocTemplateFile -Path templates/ | ForEach-Object {\n        Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath';\n      }\n    displayName: 'Generate docs'\n</code></pre> <p>This will automatically install compatible versions of all dependencies.</p>"},{"location":"install-instructions/","title":"Installation","text":"<p>PSDocs for Azure supports running within continuous integration (CI) systems or locally. It is shipped as a PowerShell module which makes it easy to install and distribute updates.</p>"},{"location":"install-instructions/#running-within-ci","title":"Running within CI","text":"<p>Continue reading creating your pipeline to learn more.</p>"},{"location":"install-instructions/#installing-locally","title":"Installing locally","text":"<p>PSDocs for Azure can be installed locally from the PowerShell Gallery using PowerShell. You can also use this option to install on CI workers that are not natively supported.</p> <p>The following platforms are supported:</p> <ul> <li>Windows PowerShell 5.1 with .NET Framework 4.7.2 or greater.</li> <li>PowerShell 7.3 or greater on MacOS, Linux, and Windows.</li> </ul> <p>PSDocs for Azure requires the PSDocs PowerShell module. The required version of PSDocs will automatically be installed along-side PSDocs for Azure.</p>"},{"location":"install-instructions/#installing-powershell","title":"Installing PowerShell","text":"<p>PowerShell 7.x can be installed on MacOS, Linux, and Windows but is not installed by default. For a list of platforms that PowerShell 7.3 is supported on and install instructions see Get PowerShell.</p>"},{"location":"install-instructions/#getting-the-modules","title":"Getting the modules","text":"<p> Module</p> <p>PSDocs for Azure can be installed or updated from the PowerShell Gallery. Use the following command line examples from a PowerShell terminal to install or update PSDocs for Azure.</p> For the current user <p>To install PSDocs for Azure for the current user use:</p> <pre><code>Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope CurrentUser\n</code></pre> <p>To update PSDocs for Azure for the current user use:</p> <pre><code>Update-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope CurrentUser\n</code></pre> <p>This will automatically install compatible versions of all dependencies.</p> For all users <p>To install PSDocs for Azure for all users (requires admin/ root permissions) use:</p> <pre><code>Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope AllUsers\n</code></pre> <p>To update PSDocs for Azure for all users (requires admin/ root permissions) use:</p> <pre><code>Update-Module -Name 'PSDocs.Azure' -Repository PSGallery -Scope AllUsers\n</code></pre> <p>This will automatically install compatible versions of all dependencies.</p>"},{"location":"install-instructions/#pre-release-versions","title":"Pre-release versions","text":"<p>To use a pre-release version of PSDocs for Azure add the <code>-AllowPrerelease</code> switch when calling <code>Install-Module</code>, <code>Update-Module</code>, or <code>Save-Module</code> cmdlets.</p> <p>Tip</p> <p>To install pre-release module versions, the latest version of PowerShellGet may be required.</p> <pre><code># Install the latest PowerShellGet version\nInstall-Module -Name PowerShellGet -Repository PSGallery -Scope CurrentUser -Force\n</code></pre>"},{"location":"install-instructions/#building-from-source","title":"Building from source","text":"<p> Source</p> <p>PSDocs for Azure is provided as open source on GitHub. To build PSDocs for Azure from source code:</p> <ol> <li>Clone the GitHub repository.</li> <li>Run <code>./build.ps1</code> from a PowerShell terminal in the cloned path.</li> </ol> <p>This build script will compile the module and documentation then output the result into <code>out/modules/PSDocs.Azure</code>.</p>"},{"location":"install-instructions/#development-dependencies","title":"Development dependencies","text":"<p>The following PowerShell modules will be automatically install if the required versions are not present:</p> <ul> <li>PlatyPS</li> <li>Pester</li> <li>PSScriptAnalyzer</li> <li>PowerShellGet</li> <li>PackageManagement</li> <li>InvokeBuild</li> </ul> <p>These additional modules are only required for building PSDocs for Azure.</p> <p>Additionally .NET Core SDK v3.1 is required. .NET Core will not be automatically downloaded and installed. To download and install the latest SDK see Download .NET Core 3.1.</p>"},{"location":"install-instructions/#limited-access-networks","title":"Limited access networks","text":"<p>If you are on a network that does not permit Internet access to the PowerShell Gallery, download the required PowerShell modules on an alternative device that has access. PowerShell provides the <code>Save-Module</code> cmdlet that can be run from a PowerShell terminal to do this.</p> <p>The following command lines can be used to download the required modules using a PowerShell terminal. After downloading the modules, copy the module directories to devices with restricted Internet access.</p> Runtime modules <p>To save PSDocs for Azure for offline use:</p> <pre><code>$modules = @('PSDocs', 'PSDocs.Azure')\nSave-Module -Name $modules -Path '.\\modules'\n</code></pre> <p>This will save PSDocs for Azure and all dependencies into the <code>modules</code> sub-directory.</p> Development modules <p>To save PSDocs for Azure development module dependencies for offline use:</p> <pre><code>$modules = @('PSDocs', 'PlatyPS', 'Pester', 'PSScriptAnalyzer',\n  'PowerShellGet', 'PackageManagement', 'InvokeBuild')\nSave-Module -Name $modules -Repository PSGallery -Path '.\\modules';\n</code></pre> <p>This will save required developments dependencies into the <code>modules</code> sub-directory.</p>"},{"location":"license-contributing/","title":"License and contributing","text":"<p>PSDocs for Azure is licensed with an  MIT License, which means it's free to use and modify. But please check out the details.</p> <p>We  open source at Microsoft.</p> <p>In addition to our team, we hope you will think about contributing too. Here is how you can get started:</p> <ul> <li> Report issues.</li> <li> Upvote existing issues that are important to you.</li> <li> Improve documentation.</li> <li> <p> Contribute code.</p> </li> </ul>"},{"location":"overview/","title":"What is PSDocs for Azure?","text":"<p>PSDocs for Azure is a module for PSDocs, an engine to generate documentation from Infrastructure as Code (IaC). PSDocs for Azure includes pre-built functions and templates that make it easy to generate documentation.</p> <p>What customers  about PSDocs for Azure:</p> <ul> <li> Continuous \u2014 Generate documentation as an output of infrastructure code,   not an extra process that someone needs to do.</li> <li> Consistency \u2014 Focus on building great solutions on Azure with infrastructure code.   As infrastructure code is updated so is the documentation.</li> <li> <p> Consumable \u2014 Transform infrastructure code into presentable documentation.   Use standard documentation that make it easier to deploy Azure resources.</p> </li> </ul>"},{"location":"overview/#ready-to-go","title":"Ready to go","text":"<p>PSDocs for Azure automatically generates documentation for Azure infrastructure as code (IaC) artifacts. It does this by, reading then processing each artifacts with one or more included documentation templates. Documentation is outputted as markdown a standard, easy to read, easy to render format for modern documentation. We use the same standard for docs.microsoft.com.</p> <p>Currently the following infrastructure code artifacts are supported:</p> <ul> <li>Azure Resource Manager (ARM) template files. Example output.</li> </ul> <p>As new features are added and improved, download the latest PowerShell module to start using them.</p>"},{"location":"overview/#devops","title":"DevOps","text":"<p>Azure infrastructure code such as ARM template supports a number of ways to self document in code. PSDocs uses these existing features and makes them easier to consume.</p> <p>Document generation can be integrated into a continuous integration (CI) pipeline to:</p> <ul> <li>Shift-left: Identify documentation issues and provide fast feedback in pull requests.</li> </ul>"},{"location":"overview/#cross-platform","title":"Cross-platform","text":"<p>PSDocs uses modern PowerShell libraries at its core, allowing it to go anywhere PowerShell can go. PSDocs runs on MacOS, Linux and Windows.</p> <p>PowerShell makes it easy to integrate PSDocs into popular CI systems. To install, use the <code>Install-Module</code> cmdlet within PowerShell. For installation options see install instructions.</p>"},{"location":"overview/#frequently-asked-questions-faq","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"overview/#can-psdocs-read-from-metadatajson","title":"Can PSDocs read from metadata.json?","text":"<p>The Azure Quickstart Templates repository uses an additional <code>metadata.json</code> to store template metadata. PSDocs doesn't require a <code>metadata.json</code> file to exist but will fallback to this file if it exists. For details on <code>metadata.json</code> see Azure Resource Manager QuickStart Templates contributing guide.</p> <p>PSDocs reads <code>metadata.json</code> using the following logic:</p> <ol> <li>Metadata is loaded from the template <code>metadata</code> property.</li> <li>When <code>metadata.json</code> exists, properties are merged with the template metadata.<ul> <li>Properties included in template metadata override properties included from <code>metadata.json</code>.</li> <li>The <code>$schema</code> property from <code>metadata.json</code> is ignored.</li> <li>For PSDocs to discover <code>metadata.json</code> it must exist in the same directory as the template file.  When creating <code>metadata.json</code> use only lowercase in the file name.</li> </ul> </li> </ol> <p>The schema of <code>metadata.json</code> differs from template metadata. To maintain compatibility, PSDocs automatically maps the metadata as described in the following table.</p> metadata.json Template metadata Description <code>itemDisplayName</code> Maps to <code>name</code> Used for markdown page title. <code>summary</code> Maps to <code>summary</code> Used as a short description for the markdown page. <code>description</code> Maps to <code>description</code> Used as a detailed description for the markdown page. <p>For example:</p> <ul> <li>If <code>name</code> exists in template metadata, this will take priority over <code>itemDisplayName</code> from <code>metadata.json</code>.</li> <li>If <code>name</code> does not exist in template metadata, <code>itemDisplayName</code> from <code>metadata.json</code> will be used.</li> </ul>"},{"location":"overview/#how-do-i-include-a-badge-image","title":"How do I include a badge image?","text":"<p>To include a badge image, create the <code>.ps-docs/azure-template-badges.md</code> file. Within this file add markdown links to your badge image.</p> <p>Use the following placeholders to reference unique images per template.</p> <ul> <li><code>{{ template_path }}</code> - The relative path of the template directory.</li> <li><code>{{ template_path_encoded }}</code> - The relative path of the template directory URL encoded.</li> </ul> <p>See about_PSDocs_Azure_Badges for additional details.</p>"},{"location":"overview/#can-psdocs-generate-badges-for-documentation","title":"Can PSDocs generate badges for documentation?","text":"<p>No. PSDocs can not generate badge images for you.</p> <p>Once you have generated a badge, PSDocs can include a link to the badge for displaying directly in markdown.</p>"},{"location":"release/","title":"Release process for PSDocs for Azure","text":"<p>The following sections describe the process for making a new release.</p> <ul> <li>Update CHANGELOG with all changes since the last release (including all pre-release versions)</li> <li>Submit a Pull Request for review</li> <li>Navigate to Releases and select Draft a new release</li> <li>SemVer is used to version the releases.  To use the correct release/tag the following options are used:<ul> <li>A stable release: increment from the previous release e.g. v0.2.0</li> <li>A pre-release: select the This is a pre-release option and select the build version from the previous build in Azure DevOps Pipelines.  This version can be found from previous build run. E.g.,  for the recent Pull Request go to Pull Request -&gt; Checks -&gt; Analyze -&gt; Azure Pipelines -&gt; PSDocs.Azure-CI Build #0.2.0-B2103003**</li> <li>Wait for the deployment to be released in PowerShell Gallery</li> </ul> </li> <li>After a successful release, create another PR updating:<ul> <li>.azure-pipelines/azure-pipelines.yaml with the next version increment e.g. if the newly released version is 0.2.0, set this to <code>version: '0.3.0'</code></li> </ul> </li> </ul>"},{"location":"support/","title":"Support","text":"<p>This project uses GitHub Issues to track bugs and feature requests. Before logging an issue please see our troubleshooting guide.</p> <p>Please search the existing issues before filing new issues to avoid duplicates.</p> <ul> <li>For new issues, file your bug or feature request as a new issue.</li> <li>For help, discussion, and support questions about using this project, join or start a discussion.</li> </ul>"},{"location":"support/#microsoft-support-policy","title":"Microsoft Support Policy","text":"<p>Support for this project/ product is limited to the resources listed above.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Coming soon.</p>"},{"location":"using-metadata/","title":"Using metadata","text":"<p>PSDocs for Azure extracts meaningful information from Azure IaC artifacts. This information can be further supplemented with metadata that adds context such as parameter descriptions.</p>"},{"location":"using-metadata/#annotate-template-files","title":"Annotate template files","text":"<p>In its simplest structure, an Azure template has the following elements:</p> <pre><code>{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {  },\n  \"variables\": {  },\n  \"functions\": [  ],\n  \"resources\": [  ],\n  \"outputs\": {  }\n}\n</code></pre> <p>Additionally a <code>metadata</code> property can be added in most places throughout the template. For example:</p> <pre><code>{\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n    \"contentVersion\": \"1.0.0.0\",\n    \"metadata\": {\n        \"name\": \"Storage Account\",\n        \"description\": \"Create or update a Storage Account.\"\n    },\n    \"parameters\": {\n        \"storageAccountName\": {\n            \"type\": \"string\",\n            \"metadata\": {\n                \"description\": \"The name of the Storage Account.\"\n            }\n        },\n        \"tags\": {\n            \"type\": \"object\",\n            \"metadata\": {\n                \"description\": \"Tags to apply to the resource.\",\n                \"example\": {\n                    \"service\": \"&lt;service_name&gt;\",\n                    \"env\": \"prod\"\n                }\n            }\n        }\n    },\n    \"resources\": [\n    ],\n    \"outputs\": {\n        \"resourceId\": {\n            \"type\": \"string\",\n            \"value\": \"[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]\",\n            \"metadata\": {\n                \"description\": \"A unique resource identifier for the storage account.\"\n            }\n        }\n    }\n}\n</code></pre> <p>This metadata and the template structure itself can be used to dynamically generate documentation. Documenting templates in this way allows you to:</p> <ul> <li>Include meaningful information with minimal effort.</li> <li>Use DevOps culture to author infrastructure code and documentation side-by-side.<ul> <li>Review pull requests (PR) with changes and documentation together.</li> <li>Use continuous integration and deployment to release changes.</li> </ul> </li> <li>Keep documentation up-to-date. No separate wiki or document to keep in sync.</li> </ul> <p>PSDocs interprets the template structure and metadata to generate documentation as markdown. Generating documentation as markdown allows you to publish web-based content on a variety of platforms.</p> <p>PSDocs supports the following metadata:</p> Field Scope Type Description <code>name</code> Template <code>string</code> Used for markdown page title. <code>summary</code> Template <code>string</code> Used as a short description for the markdown page. <code>description</code> Template <code>string</code> Used as a detailed description for the markdown page. <code>description</code> Parameter <code>string</code> Used as the description for the parameter. <code>example</code> Parameter <code>string</code>, <code>boolean</code>, <code>object</code>, or <code>array</code> An example use of the parameter. The example is included in the JSON snippet. If an example is not included the default value is used instead. <code>ignore</code> Parameter <code>boolean</code> When <code>true</code> the parameter is not included in the JSON snippet. <code>description</code> Output <code>string</code> Used as the description for the output."},{"location":"commands/en-US/Get-AzDocTemplateFile/","title":"Get-AzDocTemplateFile","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#synopsis","title":"SYNOPSIS","text":"<p>Get Azure template files within a directory structure.</p>"},{"location":"commands/en-US/Get-AzDocTemplateFile/#syntax","title":"SYNTAX","text":"<pre><code>Get-AzDocTemplateFile [[-InputPath] &lt;String[]&gt;] [[-Path] &lt;String&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/en-US/Get-AzDocTemplateFile/#description","title":"DESCRIPTION","text":"<p>Gets any Azure Resource Manager (ARM) template files found within the search path. By default, the current working path is used.</p> <p>When a JSON file is found the schema is compared to determine if it is a valid ARM template file. JSON files without a valid schema are ignored.</p>"},{"location":"commands/en-US/Get-AzDocTemplateFile/#examples","title":"EXAMPLES","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#example-1","title":"Example 1","text":"<pre><code>PS C:\\&gt; Get-AzDocTemplateFile\n</code></pre> <p>Get a list of template files within the current working directory.</p>"},{"location":"commands/en-US/Get-AzDocTemplateFile/#parameters","title":"PARAMETERS","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#-inputpath","title":"-InputPath","text":"<p>A filter for finding template files within the search path.</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases: f, TemplateFile, FullName\n\nRequired: False\nPosition: 1\nDefault value: *.json\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: True\n</code></pre>"},{"location":"commands/en-US/Get-AzDocTemplateFile/#-path","title":"-Path","text":"<p>The path to search for template files within. By default, the current working path is used.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases: p\n\nRequired: False\nPosition: 0\nDefault value: $PWD\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Get-AzDocTemplateFile/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/en-US/Get-AzDocTemplateFile/#inputs","title":"INPUTS","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#systemstring","title":"System.String[]","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#outputs","title":"OUTPUTS","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#psdocsazuredatametadataitemplatelink","title":"PSDocs.Azure.Data.Metadata.ITemplateLink","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#notes","title":"NOTES","text":""},{"location":"commands/en-US/Get-AzDocTemplateFile/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/en-US/PSDocs.Azure/","title":"PSDocs.Azure Module","text":""},{"location":"commands/en-US/PSDocs.Azure/#description","title":"Description","text":"<p>Generate documentation from Azure infrastructure as code (IaC) artifacts.</p>"},{"location":"commands/en-US/PSDocs.Azure/#psdocsazure-cmdlets","title":"PSDocs.Azure Cmdlets","text":""},{"location":"commands/en-US/PSDocs.Azure/#get-azdoctemplatefile","title":"Get-AzDocTemplateFile","text":"<p>Get Azure template files.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/","title":"PSDocs_Azure_Badges","text":""},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#about_psdocs_azure_badges","title":"about_PSDocs_Azure_Badges","text":""},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#short-description","title":"SHORT DESCRIPTION","text":"<p>Describes how to insert template badges in to documentation.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#long-description","title":"LONG DESCRIPTION","text":"<p>PSDocs allows external files to be included in Azure template documentation. Commonly this concept is used to include images that represent the validation status of the template. These images, are commonly referred to as badges. PSDocs can include badges that have been generated by an external validation tool.</p> <p>To include badge markdown:</p> <ul> <li>Create a sub-directory called <code>.ps-docs</code> in the working path of PSDocs. This would normally be root directory (<code>$PWD</code>) of the repository where your Azure template are stored.</li> <li>Create a file named <code>azure-template-badges.md</code> within the <code>.ps-docs</code> sub-directory.</li> <li>When creating all files and folder use lower case names.</li> </ul> <p>The contents of this file is automatically inserted in generated output after the title but before description.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#include-badges","title":"Include badges","text":"<p>To include badge images use standard markdown syntax within the <code>azure-template-badges.md</code> file.</p> <p>Markdown uses links to reference images. A person viewing the page must have permissions to view the source image. If not, the badge may be shown as a broken or placeholder image.</p> <p>For example:</p> <pre><code>![label](https://image_uri)\n</code></pre> <p>For example, a Github Actions badge for PSDocs.Azure would be:</p> <pre><code>![Analyze](https://github.com/Azure/PSDocs.Azure/workflows/Analyze/badge.svg)\n</code></pre> <p>To include badges images with a clickable link use standard markdown syntax:</p> <pre><code>[![label](https://image_uri)](https://link_uri)\n</code></pre> <p>For example, an Azure Pipelines badge for PSDocs.Azure would be:</p> <pre><code>[![Build Status](https://dev.azure.com/PSDocs/PSDocs.Azure/_apis/build/status/PSDocs.Azure-CI?branchName=refs%2Fpull%2F44%2Fmerge)](https://dev.azure.com/PSDocs/PSDocs.Azure/_build/latest?definitionId=1&amp;branchName=refs%2Fpull%2F44%2Fmerge)\n</code></pre>"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#dynamic-links","title":"Dynamic links","text":"<p>In additional to inserting static content, some replacement tokens have been defined. When specified within <code>azure-template-badges.md</code> each token will be replaced when the file is included. The following replacement tokens have been defined:</p> <ul> <li><code>{{ template_path }}</code> - The relative path of the template directory.</li> <li><code>{{ template_path_encoded }}</code> - The relative path of the template directory URL encoded.</li> </ul> <p>For example, if the template path was <code>.\\templates\\storage\\v1\\template.json</code> the following would be used:</p> <ul> <li><code>{{ template_path }}</code> = <code>templates/storage/v1</code></li> <li><code>{{ template_path_encoded }}</code> = <code>templates%2fstorage%2fv1</code></li> </ul> <p>The follow example shows source markdown for including badges:</p> <pre><code>![Best Practice Check](https://azurequickstartsservice.blob.core.windows.net/badges/{{ template_path }}/BestPracticeResult.svg)\n[![Deploy To Azure](https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2F{{ template_path_encoded }}%2Fazuredeploy.json)\n</code></pre> <p>After replacement the following would be the resulting output included in the template document:</p> <pre><code>![Best Practice Check](https://azurequickstartsservice.blob.core.windows.net/badges/templates/storage/v1/BestPracticeResult.svg)\n[![Deploy To Azure](https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/1-CONTRIBUTION-GUIDE/images/deploytoazure.svg?sanitize=true)](https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FAzure%2Fazure-quickstart-templates%2Fmaster%2Ftemplates%2fstorage%2fv1%2Fazuredeploy.json)\n</code></pre>"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#note","title":"NOTE","text":"<p>An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Badges.md.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Badges/#keywords","title":"KEYWORDS","text":"<ul> <li>Badge</li> </ul>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/","title":"PSDocs_Azure_Configuration","text":""},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#about_psdocs_azure_configuration","title":"about_PSDocs_Azure_Configuration","text":""},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#short-description","title":"SHORT DESCRIPTION","text":"<p>Describes PSDocs configuration options specific to <code>PSDocs.Azure</code>.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#long-description","title":"LONG DESCRIPTION","text":"<p>PSDocs exposes configuration options that can be used to customize execution of document generation. This topic describes what configuration options are available.</p> <p>PSDocs configuration options can be specified by setting the configuration option in <code>ps-docs.yaml</code>. Additionally, configuration options can be configured in a baseline or set at runtime. For details of setting configuration options see PSDocs options</p> <p>The following configurations options are available for use:</p> <ul> <li>AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN</li> <li>AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER</li> <li>AZURE_USE_PARAMETER_FILE_SNIPPET</li> <li>AZURE_USE_COMMAND_LINE_SNIPPET</li> </ul>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#azure_snippet_skip_default_value_fn","title":"AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN","text":"<p>This configuration option determines if parameters with a function defaultValue are included in snippets. By default, a parameters with a function default value are not included in snippets. i.e. If a parameter default value is set to <code>[resourceGroup.location]</code> it is not included in snippets.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN: bool # Either true or false\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN configuration option\nconfiguration:\n  AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN: true\n</code></pre> <p>Example:</p> <pre><code># YAML: Include parameters with a function default value in snippets.\nconfiguration:\n  AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN: false\n</code></pre>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#azure_snippet_skip_optional_parameter","title":"AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER","text":"<p>This configuration option determines optional parameters are included in snippets. By default, optional parameters are included in snippets. To ignore optional parameter, set this option to <code>false</code>.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER: bool # Either true or false\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER configuration option\nconfiguration:\n  AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER: false\n</code></pre> <p>Example:</p> <pre><code># YAML: Do not include optional parameters in snippets\nconfiguration:\n  AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER: true\n</code></pre>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#azure_use_parameter_file_snippet","title":"AZURE_USE_PARAMETER_FILE_SNIPPET","text":"<p>This configuration option determines if a parameter file snippet is added to documentation. By default, a snippet is generated. To prevent a parameter file snippet being generated, set this option to <code>false</code>.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_USE_PARAMETER_FILE_SNIPPET: bool # Either true or false\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_USE_PARAMETER_FILE_SNIPPET configuration option\nconfiguration:\n  AZURE_USE_PARAMETER_FILE_SNIPPET: true\n</code></pre> <p>Example:</p> <pre><code># YAML: Prevent parameter file snippet from being generated\nconfiguration:\n  AZURE_USE_PARAMETER_FILE_SNIPPET: false\n</code></pre>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#azure_use_command_line_snippet","title":"AZURE_USE_COMMAND_LINE_SNIPPET","text":"<p>This configuration option determines if a command line snippet is added to documentation. By default, this command line snippet is not generated. To generate command line snippet, set this option to <code>true</code>.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_USE_COMMAND_LINE_SNIPPET: bool # Either true or false\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_USE_COMMAND_LINE_SNIPPET configuration option is to disable generation\nconfiguration:\n  AZURE_USE_COMMAND_LINE_SNIPPET: false\n</code></pre> <p>Example:</p> <pre><code># YAML: To enable command line snippet\nconfiguration:\n  AZURE_USE_COMMAND_LINE_SNIPPET: true\n</code></pre>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#note","title":"NOTE","text":"<p>An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Configuration.md.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Configuration/#keywords","title":"KEYWORDS","text":"<ul> <li>Configuration</li> <li>Document</li> <li>Snippet</li> </ul>"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/","title":"PSDocs_Azure_Conventions","text":""},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#about_psdocs_azure_conventions","title":"about_PSDocs_Azure_Conventions","text":""},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#short-description","title":"SHORT DESCRIPTION","text":"<p>Describes how to use conventions included in <code>PSDocs.Azure</code>.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#long-description","title":"LONG DESCRIPTION","text":"<p>PSDocs for Azure includes conventions that can be included when generating documentation. Conventions alter the default pipeline to customize it for a specific situation.</p> <p>When running <code>Invoke-PSDocument</code> add the <code>-Convention</code> parameter to specify one or more conventions. For example:</p> <pre><code>Invoke-PSDocument -Convention 'Azure.NameByParentPath';\n</code></pre>"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#azurenamebyparentpath","title":"Azure.NameByParentPath","text":"<p>This convention can be used to change the default naming for documents. By default new documents are generated with the <code>README.md</code> file name.</p> <p>When the template file is stored under a well-known path <code>&lt;name&gt;/&lt;version&gt;/template.json</code> or <code>&lt;name&gt;/template.json</code>. i.e. <code>templates/storage/v1/template.json</code> or <code>templates/storage/template.json</code></p> <p>The <code>name</code> and <code>version</code> can be used to name the output file. The resulting file name is updated to <code>&lt;name&gt;_&lt;version&gt;.md</code>. i.e. <code>storage_v1.md</code></p> <p>For <code>version</code> to be detected, the version sub-directory must start with <code>v</code> and be followed by a number. When the version sub-directory a not detected the resulting file name is updated to <code>&lt;name&gt;.md</code>. i.e. <code>storage.md</code></p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#note","title":"NOTE","text":"<p>An online version of this document is available at https://github.com/Azure/PSDocs.Azure/blob/main/docs/concepts/en-US/about_PSDocs_Azure_Conventions.md.</p>"},{"location":"concepts/en-US/about_PSDocs_Azure_Conventions/#keywords","title":"KEYWORDS","text":"<ul> <li>Convention</li> <li>NameByParentPath</li> </ul>"},{"location":"publish/azure-webapp/","title":"Publish to Azure Web App","text":"<p>Markdown generated with PSDocs for Azure can be published as HTML for viewing with Azure App Service. Using Azure App Service our docs site can be secured for internal use or shared with authorized guests.</p> <p>Abstract</p> <p>This topic covers using a pipeline to publish HTML generated by PSDocs for Azure into an Azure Web App.</p>"},{"location":"publish/azure-webapp/#generating-docs-site","title":"Generating docs site","text":"<p>To publish documentation to an Azure Web App, we need to generate HTML from markdown. There are several widely used tools that help you do this. Two open source examples are:</p> <ul> <li>MkDocs \u2014 A Python-based static site generator.   MkDocs is fast and can be customized with corporate branding fairly easily.   A wide-range of themes are also available.</li> <li>DocFX \u2014 A .NET-based static site generator.   DocFX is slightly easier to get up and running but require more work to customize and brand.</li> </ul>"},{"location":"publish/azure-webapp/#with-mkdocs","title":"With MkDocs","text":"<p>Markdown content generated with PSDocs for Azure can be published as HTML with MkDocs. MkDocs is a command-line tool that converts markdown into HTML.</p> <p>Tip</p> <p>We recommend you start from our Quick Start template.</p> GitHub Actions <p>Extend your GitHub Actions workflow <code>.github/workflows/publish-docs.yaml</code> created previously by completing the following steps:</p> <ul> <li>Add the following steps to install and build documentation with MkDocs.</li> </ul> <pre><code>- name: Setup Python\n  uses: actions/setup-python@v2.2.2\n  with:\n    python-version: '3.9'\n    architecture: 'x64'\n\n- name: Install dependencies\n  run: |\n    python3 -m pip install --upgrade pip\n    python3 -m pip install wheel\n    python3 -m pip install -r requirements-docs.txt\n\n- name: Build site\n  run: mkdocs build\n</code></pre> <ul> <li>Create a convention to name and add metadata to output markdown files.   A conventions allows generated markdown to be modified before it is written.   We use one with MkDocs to add front matter to markdown files and organize them.</li> </ul> <ul> <li>Update action parameters to set output path and reference convention.</li> </ul> <pre><code># Generate markdown files using PSDocs\n# Scan for Azure template file recursively in sub-directories\n- name: Generate docs\n  uses: microsoft/ps-docs@main\n  with:\n    conventions: AddMkDocsMeta\n    modules: PSDocs,PSDocs.Azure\n    outputPath: docs/azure/templates/\n    prerelease: true\n</code></pre> <ul> <li>Create a mkdocs.yaml file in the root of the repository.   This file configures MkDocs.   By configuring this file you can change common settings such as theme and layout.</li> </ul> <ul> <li> <p>Create a requirements-docs.txt file in the root of the repository.   This file is used by Python to install the required package dependencies.</p> </li> </ul>"},{"location":"publish/azure-webapp/#publishing-docs","title":"Publishing docs","text":"<p>With documentation generated as HTML the content can be published to an Azure web app.</p> GitHub Actions <p>Extend your GitHub Actions workflow <code>.github/workflows/publish-docs.yaml</code> created previously by completing the following steps:</p> <ul> <li>Add the following steps to publish documentation to Azure App Service.</li> </ul> <pre><code>- name: Azure Login\n  uses: azure/login@v1.3.0\n  with:\n    creds: ${{ secrets.AZURE_CREDENTIALS }}\n\n- name: Publish to Azure\n  run: |\n    cd ./site\n    az webapp up -l '&lt;enter&gt;' -n '&lt;enter&gt;' -g '&lt;enter&gt;' --subscription '&lt;enter&gt;' --html\n</code></pre> <ul> <li>Create an deployment credentials <code>AZURE_CREDENTIALS</code> for the workflow to use to authenticate to Azure.</li> <li>Set <code>-l</code> with the location of the Web App.   e.g. <code>eastus</code>.</li> <li>Set <code>-n</code> with the name of the Web App.</li> <li>Set <code>-g</code> with the name of the Resource Group containing the Web App.</li> <li>Set <code>--subscription</code> with the name or GUID of the subscription to deploy to.</li> </ul>"},{"location":"publish/azure-webapp/#configuring-authorization","title":"Configuring authorization","text":"<p>Azure Web Apps have built-in support for integrated with Azure AD. By using this feature Azure AD takes care of all the heavy lifting in regards to auth.</p> <p>Read Configure your App Service or Azure Functions app to use Azure AD login to find out how to configure it.</p>"},{"location":"publish/blob-storage/","title":"Publish to Azure Storage","text":"<p>After generating markdown from Azure templates using you may want to publish these files for consumption. A simple approach is to publish the files directly to Azure Blob Storage.</p> <p>Abstract</p> <p>This topic covers using a pipeline to publish markdown generated by PSDocs for Azure to blob storage.</p> GitHub Actions <p>Extend your GitHub Actions workflow <code>.github/workflows/publish-docs.yaml</code> created previously by completing the following steps:</p> <ul> <li>Add a new step to upload files to storage.</li> </ul> <pre><code>- name: 'Copy files to Azure Storage'\n  uses: bacongobbler/azure-blob-storage-upload@v1.1.1\n  with:\n    connection_string: ${{ secrets.STORAGE_ACCOUNT_SECRET }}\n    container_name: docs\n    source_dir: 'out/docs/*'\n</code></pre> <ul> <li>Create an encrypted secret <code>STORAGE_ACCOUNT_SECRET</code> for the action to use.   The secret value is a connection string with permissions to uploads files to the storage account.</li> </ul> <p>The bacongobbler/azure-blob-storage-upload action is used to upload the markdown files to the <code>docs</code> blob storage container.</p> Example <pre><code>name: Publish docs\non:\n  push:\n    branches: [ main ]\njobs:\n  publish:\n    name: Publish\n    runs-on: ubuntu-latest\n    steps:\n\n    - uses: actions/checkout@v2\n\n    # Generate markdown files using PSDocs\n    # Scan for Azure template file recursively in the templates/ directory\n    # Then generate a docs using a standard naming convention. i.e. &lt;name&gt;_&lt;version&gt;.md\n    - name: Generate docs\n      run: |\n        Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force;\n        Get-AzDocTemplateFile -Path templates/ | ForEach-Object {\n          Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath';\n        }\n      shell: pwsh\n\n    - name: 'Copy files to Azure Storage'\n      uses: bacongobbler/azure-blob-storage-upload@v1.1.1\n      with:\n        connection_string: ${{ secrets.STORAGE_ACCOUNT_SECRET }}\n        container_name: docs\n        source_dir: 'out/docs/*'\n</code></pre> Azure Pipelines <p>Extend your Azure DevOps YAML pipeline <code>.azure-pipelines/publish-docs.yaml</code> created previously by completing the following steps:</p> <ul> <li>Add a new step to upload files to storage.</li> </ul> <pre><code>- task: AzureFileCopy@4\n  displayName: 'Copy files to Azure Storage'\n  inputs:\n    SourcePath: 'out/docs/*'\n    azureSubscription: '&lt;enter&gt;'\n    Destination: 'AzureBlob'\n    storage: '&lt;enter&gt;'\n    ContainerName: 'docs'\n</code></pre> <ul> <li>Set <code>azureSubscription</code> and <code>storage</code> inputs with the name of your Azure service connection and storage account.</li> </ul> <p>The AzureFileCopy task is used to upload the markdown files to the <code>docs</code> blob storage container.</p> Example <pre><code>jobs:\n- job: 'Publish'\n  displayName: 'Generate ARM template docs'\n  pool:\n    vmImage: 'windows-2019'\n  steps:\n\n  # Generate markdown files using PSDocs\n  # Scan for Azure template file recursively in the templates/ directory\n  # Then generate a docs using a standard naming convention. i.e. &lt;name&gt;_&lt;version&gt;.md\n  - powershell: |\n      Install-Module -Name 'PSDocs.Azure' -Repository PSGallery -Force;\n      Get-AzDocTemplateFile -Path templates/ | ForEach-Object {\n        Invoke-PSDocument -Module PSDocs.Azure -OutputPath out/docs/ -InputObject $_.TemplateFile -Convention 'Azure.NameByParentPath';\n      }\n    displayName: 'Generate docs'\n\n  - task: AzureFileCopy@4\n    displayName: 'Copy files to Azure Storage'\n    inputs:\n      SourcePath: 'out/docs/*'\n      azureSubscription: '&lt;enter&gt;'\n      Destination: 'AzureBlob'\n      storage: '&lt;enter&gt;'\n      ContainerName: 'docs'\n</code></pre>"},{"location":"publish/devops-wiki/","title":"Publish to Azure DevOps Wiki","text":"<p>Markdown generated with PSDocs for Azure can be published as wiki content for viewing with Azure DevOps.</p> <p>Abstract</p> <p>This topic covers using a pipeline to publish markdown generated by PSDocs for Azure into an Azure DevOps Wiki.</p> <p>Coming soon.</p>"},{"location":"setup/configuring-options/","title":"Configuring options","text":"<p>PSDocs for Azure comes with many configuration options. Additionally, the PSDocs engine includes several options that apply to all rules. You can visit the about_PSDocs_Options topic to read about general PSDocs options.</p>"},{"location":"setup/configuring-options/#setting-options","title":"Setting options","text":"<p>Configuration options are set within the <code>ps-docs.yaml</code> file. If you don't already have a <code>ps-docs.yaml</code> file you can create one in the root of your repository.</p> <p>Configuration can be combined as indented keys. Use comments to add context. Here are some examples:</p> <pre><code>configuration:\n  # Show command line snippet\n  AZURE_USE_COMMAND_LINE_SNIPPET: true\n\n  # Hide parameter file snippet\n  AZURE_PARAMETER_FILE_EXPANSION: false\n</code></pre> <p>Tip</p> <p>YAML can be a bit particular about indenting. If something is not working, double check that you have consistent spacing in your options file.</p>"},{"location":"setup/configuring-snippets/","title":"Configuring snippets","text":"<p>PSDocs for Azure supports a number of snippets that can be included in documentation. This feature can be enabled by using the following configuration options.</p>"},{"location":"setup/configuring-snippets/#configuration","title":"Configuration","text":"<p>Tip</p> <p>Each of these configuration options are set within the <code>ps-docs.yaml</code> file. To learn how to set configuration options see Configuring options.</p>"},{"location":"setup/configuring-snippets/#skip-function-default-value-parameters","title":"Skip function default value parameters","text":"<p> v0.4.0</p> <p>This configuration option determines if parameters with a function defaultValue are included in snippets. By default, a parameters with a function default value are not included in snippets. i.e. If a parameter default value is set to <code>[resourceGroup.location]</code> it is not included in snippets.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN: bool # Either true or false\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN configuration option\nconfiguration:\n  AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN: true\n</code></pre> <p>Example:</p> <pre><code># YAML: Include parameters with a function default value in snippets.\nconfiguration:\n  AZURE_SNIPPET_SKIP_DEFAULT_VALUE_FN: false\n</code></pre>"},{"location":"setup/configuring-snippets/#skip-optional-parameters","title":"Skip optional parameters","text":"<p> v0.4.0</p> <p>This configuration option determines optional parameters are included in snippets. By default, optional parameters are included in snippets. To ignore optional parameter, set this option to <code>false</code>.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER: bool # Either true or false\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER configuration option\nconfiguration:\n  AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER: false\n</code></pre> <p>Example:</p> <pre><code># YAML: Do not include optional parameters in snippets\nconfiguration:\n  AZURE_SNIPPET_SKIP_OPTIONAL_PARAMETER: true\n</code></pre>"},{"location":"setup/configuring-snippets/#parameter-file-snippet","title":"Parameter file snippet","text":"<p> v0.2.0</p> <p>This configuration option determines if a parameter file snippet is added to documentation. By default, a snippet is generated. To prevent a parameter file snippet being generated, set this option to <code>false</code>.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_USE_PARAMETER_FILE_SNIPPET: bool\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_USE_PARAMETER_FILE_SNIPPET configuration option\nconfiguration:\n  AZURE_USE_PARAMETER_FILE_SNIPPET: false\n</code></pre> <p>Example:</p> <pre><code># YAML: Set the AZURE_USE_PARAMETER_FILE_SNIPPET configuration option to enable expansion\nconfiguration:\n  AZURE_USE_PARAMETER_FILE_SNIPPET: true\n</code></pre>"},{"location":"setup/configuring-snippets/#command-line-snippet","title":"Command line snippet","text":"<p> v0.2.0</p> <p>This configuration option determines if a command line snippet is added to documentation. By default, this command line snippet is not generated. To generate command line snippet, set this option to <code>true</code>.</p> <p>Syntax:</p> <pre><code>configuration:\n  AZURE_USE_COMMAND_LINE_SNIPPET: bool # Either true or false\n</code></pre> <p>Default:</p> <pre><code># YAML: The default AZURE_USE_COMMAND_LINE_SNIPPET configuration option is to disable generation\nconfiguration:\n  AZURE_USE_COMMAND_LINE_SNIPPET: false\n</code></pre> <p>Example:</p> <pre><code># YAML: To enable command line snippet\nconfiguration:\n  AZURE_USE_COMMAND_LINE_SNIPPET: true\n</code></pre>"}]}